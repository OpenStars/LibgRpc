// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/grpc/testing/control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "src/proto/grpc/testing/control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace grpc {
namespace testing {
class PoissonParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PoissonParams> {
} _PoissonParams_default_instance_;
class ClosedLoopParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClosedLoopParams> {
} _ClosedLoopParams_default_instance_;
class LoadParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoadParams> {
  public:
  const ::grpc::testing::ClosedLoopParams* closed_loop_;
  const ::grpc::testing::PoissonParams* poisson_;
} _LoadParams_default_instance_;
class SecurityParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SecurityParams> {
} _SecurityParams_default_instance_;
class ChannelArgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelArg> {
  public:
  ::google::protobuf::internal::ArenaStringPtr str_value_;
  ::google::protobuf::int32 int_value_;
} _ChannelArg_default_instance_;
class ClientConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientConfig> {
} _ClientConfig_default_instance_;
class ClientStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientStatus> {
} _ClientStatus_default_instance_;
class MarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mark> {
} _Mark_default_instance_;
class ClientArgsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientArgs> {
  public:
  const ::grpc::testing::ClientConfig* setup_;
  const ::grpc::testing::Mark* mark_;
} _ClientArgs_default_instance_;
class ServerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerConfig> {
} _ServerConfig_default_instance_;
class ServerArgsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerArgs> {
  public:
  const ::grpc::testing::ServerConfig* setup_;
  const ::grpc::testing::Mark* mark_;
} _ServerArgs_default_instance_;
class ServerStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerStatus> {
} _ServerStatus_default_instance_;
class CoreRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CoreRequest> {
} _CoreRequest_default_instance_;
class CoreResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CoreResponse> {
} _CoreResponse_default_instance_;
class VoidDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Void> {
} _Void_default_instance_;
class ScenarioDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Scenario> {
} _Scenario_default_instance_;
class ScenariosDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Scenarios> {
} _Scenarios_default_instance_;
class ScenarioResultSummaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScenarioResultSummary> {
} _ScenarioResultSummary_default_instance_;
class ScenarioResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScenarioResult> {
} _ScenarioResult_default_instance_;

namespace protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoissonParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoissonParams, offered_load_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClosedLoopParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadParams, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LoadParams_default_instance_), closed_loop_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LoadParams_default_instance_), poisson_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadParams, load_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityParams, use_test_ca_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityParams, server_host_override_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelArg, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelArg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelArg, name_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ChannelArg_default_instance_), str_value_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ChannelArg_default_instance_), int_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelArg, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, server_targets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, security_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, outstanding_rpcs_per_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, client_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, async_client_threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, rpc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, load_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, payload_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, histogram_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, core_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, core_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, other_client_api_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, channel_args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, messages_per_stream_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStatus, stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, reset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientArgs, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ClientArgs_default_instance_), setup_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ClientArgs_default_instance_), mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientArgs, argtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, server_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, security_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, async_server_threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, core_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, payload_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, core_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, other_server_api_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, resource_quota_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerArgs, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ServerArgs_default_instance_), setup_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ServerArgs_default_instance_), mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerArgs, argtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, cores_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoreResponse, cores_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, client_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, num_clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, server_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, num_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, warmup_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, benchmark_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, spawn_local_worker_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenarios, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenarios, scenarios_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, qps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, qps_per_server_core_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, server_system_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, server_user_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, client_system_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, client_user_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, latency_50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, latency_90_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, latency_95_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, latency_99_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, latency_999_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, server_cpu_usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, successful_requests_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, failed_requests_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, client_polls_per_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResultSummary, server_polls_per_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, scenario_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, latencies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, client_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, server_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, server_cores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, client_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, server_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioResult, request_results_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PoissonParams)},
  { 6, -1, sizeof(ClosedLoopParams)},
  { 11, -1, sizeof(LoadParams)},
  { 19, -1, sizeof(SecurityParams)},
  { 26, -1, sizeof(ChannelArg)},
  { 35, -1, sizeof(ClientConfig)},
  { 55, -1, sizeof(ClientStatus)},
  { 61, -1, sizeof(Mark)},
  { 67, -1, sizeof(ClientArgs)},
  { 75, -1, sizeof(ServerConfig)},
  { 89, -1, sizeof(ServerArgs)},
  { 97, -1, sizeof(ServerStatus)},
  { 105, -1, sizeof(CoreRequest)},
  { 110, -1, sizeof(CoreResponse)},
  { 116, -1, sizeof(Void)},
  { 121, -1, sizeof(Scenario)},
  { 134, -1, sizeof(Scenarios)},
  { 140, -1, sizeof(ScenarioResultSummary)},
  { 161, -1, sizeof(ScenarioResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoissonParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClosedLoopParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoadParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SecurityParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoreRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Void_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scenario_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scenarios_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenarioResultSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenarioResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "src/proto/grpc/testing/control.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _PoissonParams_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ClosedLoopParams_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LoadParams_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SecurityParams_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ChannelArg_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ClientConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ClientStatus_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Mark_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ClientArgs_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ServerConfig_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ServerArgs_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ServerStatus_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CoreRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CoreResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Void_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Scenario_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Scenarios_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ScenarioResultSummary_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _ScenarioResult_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::grpc::testing::protobuf_src_2fproto_2fgrpc_2ftesting_2fpayloads_2eproto::InitDefaults();
  ::grpc::testing::protobuf_src_2fproto_2fgrpc_2ftesting_2fstats_2eproto::InitDefaults();
  _PoissonParams_default_instance_.DefaultConstruct();
  _ClosedLoopParams_default_instance_.DefaultConstruct();
  _LoadParams_default_instance_.DefaultConstruct();
  _SecurityParams_default_instance_.DefaultConstruct();
  _ChannelArg_default_instance_.DefaultConstruct();
  _ClientConfig_default_instance_.DefaultConstruct();
  _ClientStatus_default_instance_.DefaultConstruct();
  _Mark_default_instance_.DefaultConstruct();
  _ClientArgs_default_instance_.DefaultConstruct();
  _ServerConfig_default_instance_.DefaultConstruct();
  _ServerArgs_default_instance_.DefaultConstruct();
  _ServerStatus_default_instance_.DefaultConstruct();
  _CoreRequest_default_instance_.DefaultConstruct();
  _CoreResponse_default_instance_.DefaultConstruct();
  _Void_default_instance_.DefaultConstruct();
  _Scenario_default_instance_.DefaultConstruct();
  _Scenarios_default_instance_.DefaultConstruct();
  _ScenarioResultSummary_default_instance_.DefaultConstruct();
  _ScenarioResult_default_instance_.DefaultConstruct();
  _LoadParams_default_instance_.closed_loop_ = const_cast< ::grpc::testing::ClosedLoopParams*>(
      ::grpc::testing::ClosedLoopParams::internal_default_instance());
  _LoadParams_default_instance_.poisson_ = const_cast< ::grpc::testing::PoissonParams*>(
      ::grpc::testing::PoissonParams::internal_default_instance());
  _ChannelArg_default_instance_.str_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ChannelArg_default_instance_.int_value_ = 0;
  _ClientConfig_default_instance_.get_mutable()->security_params_ = const_cast< ::grpc::testing::SecurityParams*>(
      ::grpc::testing::SecurityParams::internal_default_instance());
  _ClientConfig_default_instance_.get_mutable()->load_params_ = const_cast< ::grpc::testing::LoadParams*>(
      ::grpc::testing::LoadParams::internal_default_instance());
  _ClientConfig_default_instance_.get_mutable()->payload_config_ = const_cast< ::grpc::testing::PayloadConfig*>(
      ::grpc::testing::PayloadConfig::internal_default_instance());
  _ClientConfig_default_instance_.get_mutable()->histogram_params_ = const_cast< ::grpc::testing::HistogramParams*>(
      ::grpc::testing::HistogramParams::internal_default_instance());
  _ClientStatus_default_instance_.get_mutable()->stats_ = const_cast< ::grpc::testing::ClientStats*>(
      ::grpc::testing::ClientStats::internal_default_instance());
  _ClientArgs_default_instance_.setup_ = const_cast< ::grpc::testing::ClientConfig*>(
      ::grpc::testing::ClientConfig::internal_default_instance());
  _ClientArgs_default_instance_.mark_ = const_cast< ::grpc::testing::Mark*>(
      ::grpc::testing::Mark::internal_default_instance());
  _ServerConfig_default_instance_.get_mutable()->security_params_ = const_cast< ::grpc::testing::SecurityParams*>(
      ::grpc::testing::SecurityParams::internal_default_instance());
  _ServerConfig_default_instance_.get_mutable()->payload_config_ = const_cast< ::grpc::testing::PayloadConfig*>(
      ::grpc::testing::PayloadConfig::internal_default_instance());
  _ServerArgs_default_instance_.setup_ = const_cast< ::grpc::testing::ServerConfig*>(
      ::grpc::testing::ServerConfig::internal_default_instance());
  _ServerArgs_default_instance_.mark_ = const_cast< ::grpc::testing::Mark*>(
      ::grpc::testing::Mark::internal_default_instance());
  _ServerStatus_default_instance_.get_mutable()->stats_ = const_cast< ::grpc::testing::ServerStats*>(
      ::grpc::testing::ServerStats::internal_default_instance());
  _Scenario_default_instance_.get_mutable()->client_config_ = const_cast< ::grpc::testing::ClientConfig*>(
      ::grpc::testing::ClientConfig::internal_default_instance());
  _Scenario_default_instance_.get_mutable()->server_config_ = const_cast< ::grpc::testing::ServerConfig*>(
      ::grpc::testing::ServerConfig::internal_default_instance());
  _ScenarioResult_default_instance_.get_mutable()->scenario_ = const_cast< ::grpc::testing::Scenario*>(
      ::grpc::testing::Scenario::internal_default_instance());
  _ScenarioResult_default_instance_.get_mutable()->latencies_ = const_cast< ::grpc::testing::HistogramData*>(
      ::grpc::testing::HistogramData::internal_default_instance());
  _ScenarioResult_default_instance_.get_mutable()->summary_ = const_cast< ::grpc::testing::ScenarioResultSummary*>(
      ::grpc::testing::ScenarioResultSummary::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$src/proto/grpc/testing/control.proto\022\014"
      "grpc.testing\032%src/proto/grpc/testing/pay"
      "loads.proto\032\"src/proto/grpc/testing/stat"
      "s.proto\"%\n\rPoissonParams\022\024\n\014offered_load"
      "\030\001 \001(\001\"\022\n\020ClosedLoopParams\"{\n\nLoadParams"
      "\0225\n\013closed_loop\030\001 \001(\0132\036.grpc.testing.Clo"
      "sedLoopParamsH\000\022.\n\007poisson\030\002 \001(\0132\033.grpc."
      "testing.PoissonParamsH\000B\006\n\004load\"C\n\016Secur"
      "ityParams\022\023\n\013use_test_ca\030\001 \001(\010\022\034\n\024server"
      "_host_override\030\002 \001(\t\"M\n\nChannelArg\022\014\n\004na"
      "me\030\001 \001(\t\022\023\n\tstr_value\030\002 \001(\tH\000\022\023\n\tint_val"
      "ue\030\003 \001(\005H\000B\007\n\005value\"\275\004\n\014ClientConfig\022\026\n\016"
      "server_targets\030\001 \003(\t\022-\n\013client_type\030\002 \001("
      "\0162\030.grpc.testing.ClientType\0225\n\017security_"
      "params\030\003 \001(\0132\034.grpc.testing.SecurityPara"
      "ms\022$\n\034outstanding_rpcs_per_channel\030\004 \001(\005"
      "\022\027\n\017client_channels\030\005 \001(\005\022\034\n\024async_clien"
      "t_threads\030\007 \001(\005\022\'\n\010rpc_type\030\010 \001(\0162\025.grpc"
      ".testing.RpcType\022-\n\013load_params\030\n \001(\0132\030."
      "grpc.testing.LoadParams\0223\n\016payload_confi"
      "g\030\013 \001(\0132\033.grpc.testing.PayloadConfig\0227\n\020"
      "histogram_params\030\014 \001(\0132\035.grpc.testing.Hi"
      "stogramParams\022\021\n\tcore_list\030\r \003(\005\022\022\n\ncore"
      "_limit\030\016 \001(\005\022\030\n\020other_client_api\030\017 \001(\t\022."
      "\n\014channel_args\030\020 \003(\0132\030.grpc.testing.Chan"
      "nelArg\022\033\n\023messages_per_stream\030\022 \001(\005\"8\n\014C"
      "lientStatus\022(\n\005stats\030\001 \001(\0132\031.grpc.testin"
      "g.ClientStats\"\025\n\004Mark\022\r\n\005reset\030\001 \001(\010\"h\n\n"
      "ClientArgs\022+\n\005setup\030\001 \001(\0132\032.grpc.testing"
      ".ClientConfigH\000\022\"\n\004mark\030\002 \001(\0132\022.grpc.tes"
      "ting.MarkH\000B\t\n\007argtype\"\264\002\n\014ServerConfig\022"
      "-\n\013server_type\030\001 \001(\0162\030.grpc.testing.Serv"
      "erType\0225\n\017security_params\030\002 \001(\0132\034.grpc.t"
      "esting.SecurityParams\022\014\n\004port\030\004 \001(\005\022\034\n\024a"
      "sync_server_threads\030\007 \001(\005\022\022\n\ncore_limit\030"
      "\010 \001(\005\0223\n\016payload_config\030\t \001(\0132\033.grpc.tes"
      "ting.PayloadConfig\022\021\n\tcore_list\030\n \003(\005\022\030\n"
      "\020other_server_api\030\013 \001(\t\022\034\n\023resource_quot"
      "a_size\030\351\007 \001(\005\"h\n\nServerArgs\022+\n\005setup\030\001 \001"
      "(\0132\032.grpc.testing.ServerConfigH\000\022\"\n\004mark"
      "\030\002 \001(\0132\022.grpc.testing.MarkH\000B\t\n\007argtype\""
      "U\n\014ServerStatus\022(\n\005stats\030\001 \001(\0132\031.grpc.te"
      "sting.ServerStats\022\014\n\004port\030\002 \001(\005\022\r\n\005cores"
      "\030\003 \001(\005\"\r\n\013CoreRequest\"\035\n\014CoreResponse\022\r\n"
      "\005cores\030\001 \001(\005\"\006\n\004Void\"\375\001\n\010Scenario\022\014\n\004nam"
      "e\030\001 \001(\t\0221\n\rclient_config\030\002 \001(\0132\032.grpc.te"
      "sting.ClientConfig\022\023\n\013num_clients\030\003 \001(\005\022"
      "1\n\rserver_config\030\004 \001(\0132\032.grpc.testing.Se"
      "rverConfig\022\023\n\013num_servers\030\005 \001(\005\022\026\n\016warmu"
      "p_seconds\030\006 \001(\005\022\031\n\021benchmark_seconds\030\007 \001"
      "(\005\022 \n\030spawn_local_worker_count\030\010 \001(\005\"6\n\t"
      "Scenarios\022)\n\tscenarios\030\001 \003(\0132\026.grpc.test"
      "ing.Scenario\"\274\003\n\025ScenarioResultSummary\022\013"
      "\n\003qps\030\001 \001(\001\022\033\n\023qps_per_server_core\030\002 \001(\001"
      "\022\032\n\022server_system_time\030\003 \001(\001\022\030\n\020server_u"
      "ser_time\030\004 \001(\001\022\032\n\022client_system_time\030\005 \001"
      "(\001\022\030\n\020client_user_time\030\006 \001(\001\022\022\n\nlatency_"
      "50\030\007 \001(\001\022\022\n\nlatency_90\030\010 \001(\001\022\022\n\nlatency_"
      "95\030\t \001(\001\022\022\n\nlatency_99\030\n \001(\001\022\023\n\013latency_"
      "999\030\013 \001(\001\022\030\n\020server_cpu_usage\030\014 \001(\001\022&\n\036s"
      "uccessful_requests_per_second\030\r \001(\001\022\"\n\032f"
      "ailed_requests_per_second\030\016 \001(\001\022 \n\030clien"
      "t_polls_per_request\030\017 \001(\001\022 \n\030server_poll"
      "s_per_request\030\020 \001(\001\"\203\003\n\016ScenarioResult\022("
      "\n\010scenario\030\001 \001(\0132\026.grpc.testing.Scenario"
      "\022.\n\tlatencies\030\002 \001(\0132\033.grpc.testing.Histo"
      "gramData\022/\n\014client_stats\030\003 \003(\0132\031.grpc.te"
      "sting.ClientStats\022/\n\014server_stats\030\004 \003(\0132"
      "\031.grpc.testing.ServerStats\022\024\n\014server_cor"
      "es\030\005 \003(\005\0224\n\007summary\030\006 \001(\0132#.grpc.testing"
      ".ScenarioResultSummary\022\026\n\016client_success"
      "\030\007 \003(\010\022\026\n\016server_success\030\010 \003(\010\0229\n\017reques"
      "t_results\030\t \003(\0132 .grpc.testing.RequestRe"
      "sultCount*A\n\nClientType\022\017\n\013SYNC_CLIENT\020\000"
      "\022\020\n\014ASYNC_CLIENT\020\001\022\020\n\014OTHER_CLIENT\020\002*[\n\n"
      "ServerType\022\017\n\013SYNC_SERVER\020\000\022\020\n\014ASYNC_SER"
      "VER\020\001\022\030\n\024ASYNC_GENERIC_SERVER\020\002\022\020\n\014OTHER"
      "_SERVER\020\003*r\n\007RpcType\022\t\n\005UNARY\020\000\022\r\n\tSTREA"
      "MING\020\001\022\031\n\025STREAMING_FROM_CLIENT\020\002\022\031\n\025STR"
      "EAMING_FROM_SERVER\020\003\022\027\n\023STREAMING_BOTH_W"
      "AYS\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/proto/grpc/testing/control.proto", &protobuf_RegisterTypes);
  ::grpc::testing::protobuf_src_2fproto_2fgrpc_2ftesting_2fpayloads_2eproto::AddDescriptors();
  ::grpc::testing::protobuf_src_2fproto_2fgrpc_2ftesting_2fstats_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto

const ::google::protobuf::EnumDescriptor* ClientType_descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_enum_descriptors[0];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_enum_descriptors[1];
}
bool ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RpcType_descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_enum_descriptors[2];
}
bool RpcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoissonParams::kOfferedLoadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoissonParams::PoissonParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.PoissonParams)
}
PoissonParams::PoissonParams(const PoissonParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offered_load_ = from.offered_load_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.PoissonParams)
}

void PoissonParams::SharedCtor() {
  offered_load_ = 0;
  _cached_size_ = 0;
}

PoissonParams::~PoissonParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.PoissonParams)
  SharedDtor();
}

void PoissonParams::SharedDtor() {
}

void PoissonParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoissonParams::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoissonParams& PoissonParams::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoissonParams* PoissonParams::New(::google::protobuf::Arena* arena) const {
  PoissonParams* n = new PoissonParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoissonParams::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.PoissonParams)
  offered_load_ = 0;
}

bool PoissonParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.PoissonParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double offered_load = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offered_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.PoissonParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.PoissonParams)
  return false;
#undef DO_
}

void PoissonParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.PoissonParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double offered_load = 1;
  if (this->offered_load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->offered_load(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.PoissonParams)
}

::google::protobuf::uint8* PoissonParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.PoissonParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double offered_load = 1;
  if (this->offered_load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->offered_load(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.PoissonParams)
  return target;
}

size_t PoissonParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.PoissonParams)
  size_t total_size = 0;

  // double offered_load = 1;
  if (this->offered_load() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoissonParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.PoissonParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PoissonParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoissonParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.PoissonParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.PoissonParams)
    MergeFrom(*source);
  }
}

void PoissonParams::MergeFrom(const PoissonParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.PoissonParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offered_load() != 0) {
    set_offered_load(from.offered_load());
  }
}

void PoissonParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.PoissonParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoissonParams::CopyFrom(const PoissonParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.PoissonParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoissonParams::IsInitialized() const {
  return true;
}

void PoissonParams::Swap(PoissonParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoissonParams::InternalSwap(PoissonParams* other) {
  std::swap(offered_load_, other->offered_load_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoissonParams::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoissonParams

// double offered_load = 1;
void PoissonParams::clear_offered_load() {
  offered_load_ = 0;
}
double PoissonParams::offered_load() const {
  // @@protoc_insertion_point(field_get:grpc.testing.PoissonParams.offered_load)
  return offered_load_;
}
void PoissonParams::set_offered_load(double value) {
  
  offered_load_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.PoissonParams.offered_load)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClosedLoopParams::ClosedLoopParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ClosedLoopParams)
}
ClosedLoopParams::ClosedLoopParams(const ClosedLoopParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ClosedLoopParams)
}

void ClosedLoopParams::SharedCtor() {
  _cached_size_ = 0;
}

ClosedLoopParams::~ClosedLoopParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.ClosedLoopParams)
  SharedDtor();
}

void ClosedLoopParams::SharedDtor() {
}

void ClosedLoopParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClosedLoopParams::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClosedLoopParams& ClosedLoopParams::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClosedLoopParams* ClosedLoopParams::New(::google::protobuf::Arena* arena) const {
  ClosedLoopParams* n = new ClosedLoopParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClosedLoopParams::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ClosedLoopParams)
}

bool ClosedLoopParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ClosedLoopParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ClosedLoopParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ClosedLoopParams)
  return false;
#undef DO_
}

void ClosedLoopParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ClosedLoopParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:grpc.testing.ClosedLoopParams)
}

::google::protobuf::uint8* ClosedLoopParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ClosedLoopParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ClosedLoopParams)
  return target;
}

size_t ClosedLoopParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ClosedLoopParams)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClosedLoopParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ClosedLoopParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ClosedLoopParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClosedLoopParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ClosedLoopParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ClosedLoopParams)
    MergeFrom(*source);
  }
}

void ClosedLoopParams::MergeFrom(const ClosedLoopParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ClosedLoopParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClosedLoopParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ClosedLoopParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosedLoopParams::CopyFrom(const ClosedLoopParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ClosedLoopParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosedLoopParams::IsInitialized() const {
  return true;
}

void ClosedLoopParams::Swap(ClosedLoopParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClosedLoopParams::InternalSwap(ClosedLoopParams* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClosedLoopParams::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClosedLoopParams

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadParams::kClosedLoopFieldNumber;
const int LoadParams::kPoissonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadParams::LoadParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.LoadParams)
}
LoadParams::LoadParams(const LoadParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_load();
  switch (from.load_case()) {
    case kClosedLoop: {
      mutable_closed_loop()->::grpc::testing::ClosedLoopParams::MergeFrom(from.closed_loop());
      break;
    }
    case kPoisson: {
      mutable_poisson()->::grpc::testing::PoissonParams::MergeFrom(from.poisson());
      break;
    }
    case LOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.LoadParams)
}

void LoadParams::SharedCtor() {
  clear_has_load();
  _cached_size_ = 0;
}

LoadParams::~LoadParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.LoadParams)
  SharedDtor();
}

void LoadParams::SharedDtor() {
  if (has_load()) {
    clear_load();
  }
}

void LoadParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadParams::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadParams& LoadParams::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoadParams* LoadParams::New(::google::protobuf::Arena* arena) const {
  LoadParams* n = new LoadParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadParams::clear_load() {
// @@protoc_insertion_point(one_of_clear_start:grpc.testing.LoadParams)
  switch (load_case()) {
    case kClosedLoop: {
      delete load_.closed_loop_;
      break;
    }
    case kPoisson: {
      delete load_.poisson_;
      break;
    }
    case LOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOAD_NOT_SET;
}


void LoadParams::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.LoadParams)
  clear_load();
}

bool LoadParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.LoadParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.ClosedLoopParams closed_loop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closed_loop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.PoissonParams poisson = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poisson()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.LoadParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.LoadParams)
  return false;
#undef DO_
}

void LoadParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.LoadParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ClosedLoopParams closed_loop = 1;
  if (has_closed_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *load_.closed_loop_, output);
  }

  // .grpc.testing.PoissonParams poisson = 2;
  if (has_poisson()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *load_.poisson_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.LoadParams)
}

::google::protobuf::uint8* LoadParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.LoadParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ClosedLoopParams closed_loop = 1;
  if (has_closed_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *load_.closed_loop_, deterministic, target);
  }

  // .grpc.testing.PoissonParams poisson = 2;
  if (has_poisson()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *load_.poisson_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.LoadParams)
  return target;
}

size_t LoadParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.LoadParams)
  size_t total_size = 0;

  switch (load_case()) {
    // .grpc.testing.ClosedLoopParams closed_loop = 1;
    case kClosedLoop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *load_.closed_loop_);
      break;
    }
    // .grpc.testing.PoissonParams poisson = 2;
    case kPoisson: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *load_.poisson_);
      break;
    }
    case LOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.LoadParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.LoadParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.LoadParams)
    MergeFrom(*source);
  }
}

void LoadParams::MergeFrom(const LoadParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.LoadParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.load_case()) {
    case kClosedLoop: {
      mutable_closed_loop()->::grpc::testing::ClosedLoopParams::MergeFrom(from.closed_loop());
      break;
    }
    case kPoisson: {
      mutable_poisson()->::grpc::testing::PoissonParams::MergeFrom(from.poisson());
      break;
    }
    case LOAD_NOT_SET: {
      break;
    }
  }
}

void LoadParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.LoadParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadParams::CopyFrom(const LoadParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.LoadParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadParams::IsInitialized() const {
  return true;
}

void LoadParams::Swap(LoadParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadParams::InternalSwap(LoadParams* other) {
  std::swap(load_, other->load_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadParams::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadParams

// .grpc.testing.ClosedLoopParams closed_loop = 1;
bool LoadParams::has_closed_loop() const {
  return load_case() == kClosedLoop;
}
void LoadParams::set_has_closed_loop() {
  _oneof_case_[0] = kClosedLoop;
}
void LoadParams::clear_closed_loop() {
  if (has_closed_loop()) {
    delete load_.closed_loop_;
    clear_has_load();
  }
}
 const ::grpc::testing::ClosedLoopParams& LoadParams::closed_loop() const {
  // @@protoc_insertion_point(field_get:grpc.testing.LoadParams.closed_loop)
  return has_closed_loop()
      ? *load_.closed_loop_
      : ::grpc::testing::ClosedLoopParams::default_instance();
}
::grpc::testing::ClosedLoopParams* LoadParams::mutable_closed_loop() {
  if (!has_closed_loop()) {
    clear_load();
    set_has_closed_loop();
    load_.closed_loop_ = new ::grpc::testing::ClosedLoopParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.LoadParams.closed_loop)
  return load_.closed_loop_;
}
::grpc::testing::ClosedLoopParams* LoadParams::release_closed_loop() {
  // @@protoc_insertion_point(field_release:grpc.testing.LoadParams.closed_loop)
  if (has_closed_loop()) {
    clear_has_load();
    ::grpc::testing::ClosedLoopParams* temp = load_.closed_loop_;
    load_.closed_loop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LoadParams::set_allocated_closed_loop(::grpc::testing::ClosedLoopParams* closed_loop) {
  clear_load();
  if (closed_loop) {
    set_has_closed_loop();
    load_.closed_loop_ = closed_loop;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.LoadParams.closed_loop)
}

// .grpc.testing.PoissonParams poisson = 2;
bool LoadParams::has_poisson() const {
  return load_case() == kPoisson;
}
void LoadParams::set_has_poisson() {
  _oneof_case_[0] = kPoisson;
}
void LoadParams::clear_poisson() {
  if (has_poisson()) {
    delete load_.poisson_;
    clear_has_load();
  }
}
 const ::grpc::testing::PoissonParams& LoadParams::poisson() const {
  // @@protoc_insertion_point(field_get:grpc.testing.LoadParams.poisson)
  return has_poisson()
      ? *load_.poisson_
      : ::grpc::testing::PoissonParams::default_instance();
}
::grpc::testing::PoissonParams* LoadParams::mutable_poisson() {
  if (!has_poisson()) {
    clear_load();
    set_has_poisson();
    load_.poisson_ = new ::grpc::testing::PoissonParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.LoadParams.poisson)
  return load_.poisson_;
}
::grpc::testing::PoissonParams* LoadParams::release_poisson() {
  // @@protoc_insertion_point(field_release:grpc.testing.LoadParams.poisson)
  if (has_poisson()) {
    clear_has_load();
    ::grpc::testing::PoissonParams* temp = load_.poisson_;
    load_.poisson_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LoadParams::set_allocated_poisson(::grpc::testing::PoissonParams* poisson) {
  clear_load();
  if (poisson) {
    set_has_poisson();
    load_.poisson_ = poisson;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.LoadParams.poisson)
}

bool LoadParams::has_load() const {
  return load_case() != LOAD_NOT_SET;
}
void LoadParams::clear_has_load() {
  _oneof_case_[0] = LOAD_NOT_SET;
}
LoadParams::LoadCase LoadParams::load_case() const {
  return LoadParams::LoadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityParams::kUseTestCaFieldNumber;
const int SecurityParams::kServerHostOverrideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityParams::SecurityParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SecurityParams)
}
SecurityParams::SecurityParams(const SecurityParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_host_override_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_host_override().size() > 0) {
    server_host_override_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_host_override_);
  }
  use_test_ca_ = from.use_test_ca_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SecurityParams)
}

void SecurityParams::SharedCtor() {
  server_host_override_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_test_ca_ = false;
  _cached_size_ = 0;
}

SecurityParams::~SecurityParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.SecurityParams)
  SharedDtor();
}

void SecurityParams::SharedDtor() {
  server_host_override_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityParams::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityParams& SecurityParams::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

SecurityParams* SecurityParams::New(::google::protobuf::Arena* arena) const {
  SecurityParams* n = new SecurityParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SecurityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.SecurityParams)
  server_host_override_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_test_ca_ = false;
}

bool SecurityParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SecurityParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool use_test_ca = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_test_ca_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_host_override = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_host_override()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_host_override().data(), this->server_host_override().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.SecurityParams.server_host_override"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SecurityParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SecurityParams)
  return false;
#undef DO_
}

void SecurityParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SecurityParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_test_ca = 1;
  if (this->use_test_ca() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_test_ca(), output);
  }

  // string server_host_override = 2;
  if (this->server_host_override().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_host_override().data(), this->server_host_override().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.SecurityParams.server_host_override");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_host_override(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.SecurityParams)
}

::google::protobuf::uint8* SecurityParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SecurityParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_test_ca = 1;
  if (this->use_test_ca() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_test_ca(), target);
  }

  // string server_host_override = 2;
  if (this->server_host_override().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_host_override().data(), this->server_host_override().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.SecurityParams.server_host_override");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_host_override(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SecurityParams)
  return target;
}

size_t SecurityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.SecurityParams)
  size_t total_size = 0;

  // string server_host_override = 2;
  if (this->server_host_override().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_host_override());
  }

  // bool use_test_ca = 1;
  if (this->use_test_ca() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.SecurityParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.SecurityParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.SecurityParams)
    MergeFrom(*source);
  }
}

void SecurityParams::MergeFrom(const SecurityParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.SecurityParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_host_override().size() > 0) {

    server_host_override_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_host_override_);
  }
  if (from.use_test_ca() != 0) {
    set_use_test_ca(from.use_test_ca());
  }
}

void SecurityParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.SecurityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityParams::CopyFrom(const SecurityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.SecurityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityParams::IsInitialized() const {
  return true;
}

void SecurityParams::Swap(SecurityParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityParams::InternalSwap(SecurityParams* other) {
  server_host_override_.Swap(&other->server_host_override_);
  std::swap(use_test_ca_, other->use_test_ca_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SecurityParams::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SecurityParams

// bool use_test_ca = 1;
void SecurityParams::clear_use_test_ca() {
  use_test_ca_ = false;
}
bool SecurityParams::use_test_ca() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SecurityParams.use_test_ca)
  return use_test_ca_;
}
void SecurityParams::set_use_test_ca(bool value) {
  
  use_test_ca_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.SecurityParams.use_test_ca)
}

// string server_host_override = 2;
void SecurityParams::clear_server_host_override() {
  server_host_override_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SecurityParams::server_host_override() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SecurityParams.server_host_override)
  return server_host_override_.GetNoArena();
}
void SecurityParams::set_server_host_override(const ::std::string& value) {
  
  server_host_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SecurityParams.server_host_override)
}
#if LANG_CXX11
void SecurityParams::set_server_host_override(::std::string&& value) {
  
  server_host_override_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.SecurityParams.server_host_override)
}
#endif
void SecurityParams::set_server_host_override(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_host_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SecurityParams.server_host_override)
}
void SecurityParams::set_server_host_override(const char* value, size_t size) {
  
  server_host_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SecurityParams.server_host_override)
}
::std::string* SecurityParams::mutable_server_host_override() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.SecurityParams.server_host_override)
  return server_host_override_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SecurityParams::release_server_host_override() {
  // @@protoc_insertion_point(field_release:grpc.testing.SecurityParams.server_host_override)
  
  return server_host_override_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SecurityParams::set_allocated_server_host_override(::std::string* server_host_override) {
  if (server_host_override != NULL) {
    
  } else {
    
  }
  server_host_override_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_host_override);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SecurityParams.server_host_override)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelArg::kNameFieldNumber;
const int ChannelArg::kStrValueFieldNumber;
const int ChannelArg::kIntValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelArg::ChannelArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ChannelArg)
}
ChannelArg::ChannelArg(const ChannelArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kStrValue: {
      set_str_value(from.str_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ChannelArg)
}

void ChannelArg::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
  _cached_size_ = 0;
}

ChannelArg::~ChannelArg() {
  // @@protoc_insertion_point(destructor:grpc.testing.ChannelArg)
  SharedDtor();
}

void ChannelArg::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void ChannelArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelArg::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelArg& ChannelArg::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelArg* ChannelArg::New(::google::protobuf::Arena* arena) const {
  ChannelArg* n = new ChannelArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelArg::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:grpc.testing.ChannelArg)
  switch (value_case()) {
    case kStrValue: {
      value_.str_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ChannelArg::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ChannelArg)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
}

bool ChannelArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ChannelArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.ChannelArg.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string str_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str_value().data(), this->str_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.ChannelArg.str_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ChannelArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ChannelArg)
  return false;
#undef DO_
}

void ChannelArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ChannelArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ChannelArg.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string str_value = 2;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ChannelArg.str_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str_value(), output);
  }

  // int32 int_value = 3;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ChannelArg)
}

::google::protobuf::uint8* ChannelArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ChannelArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ChannelArg.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string str_value = 2;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ChannelArg.str_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str_value(), target);
  }

  // int32 int_value = 3;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ChannelArg)
  return target;
}

size_t ChannelArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ChannelArg)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (value_case()) {
    // string str_value = 2;
    case kStrValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_value());
      break;
    }
    // int32 int_value = 3;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ChannelArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ChannelArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ChannelArg)
    MergeFrom(*source);
  }
}

void ChannelArg::MergeFrom(const ChannelArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ChannelArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.value_case()) {
    case kStrValue: {
      set_str_value(from.str_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ChannelArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ChannelArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelArg::CopyFrom(const ChannelArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ChannelArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelArg::IsInitialized() const {
  return true;
}

void ChannelArg::Swap(ChannelArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelArg::InternalSwap(ChannelArg* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelArg::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelArg

// string name = 1;
void ChannelArg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelArg::name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ChannelArg.name)
  return name_.GetNoArena();
}
void ChannelArg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.ChannelArg.name)
}
#if LANG_CXX11
void ChannelArg::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.ChannelArg.name)
}
#endif
void ChannelArg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.ChannelArg.name)
}
void ChannelArg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.ChannelArg.name)
}
::std::string* ChannelArg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.ChannelArg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelArg::release_name() {
  // @@protoc_insertion_point(field_release:grpc.testing.ChannelArg.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelArg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ChannelArg.name)
}

// string str_value = 2;
bool ChannelArg::has_str_value() const {
  return value_case() == kStrValue;
}
void ChannelArg::set_has_str_value() {
  _oneof_case_[0] = kStrValue;
}
void ChannelArg::clear_str_value() {
  if (has_str_value()) {
    value_.str_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& ChannelArg::str_value() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ChannelArg.str_value)
  if (has_str_value()) {
    return value_.str_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ChannelArg::set_str_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.testing.ChannelArg.str_value)
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.ChannelArg.str_value)
}
#if LANG_CXX11
void ChannelArg::set_str_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.testing.ChannelArg.str_value)
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.ChannelArg.str_value)
}
#endif
void ChannelArg::set_str_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.ChannelArg.str_value)
}
void ChannelArg::set_str_value(const char* value, size_t size) {
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.ChannelArg.str_value)
}
::std::string* ChannelArg::mutable_str_value() {
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ChannelArg.str_value)
  return value_.str_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelArg::release_str_value() {
  // @@protoc_insertion_point(field_release:grpc.testing.ChannelArg.str_value)
  if (has_str_value()) {
    clear_has_value();
    return value_.str_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ChannelArg::set_allocated_str_value(::std::string* str_value) {
  if (!has_str_value()) {
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (str_value != NULL) {
    set_has_str_value();
    value_.str_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        str_value);
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ChannelArg.str_value)
}

// int32 int_value = 3;
bool ChannelArg::has_int_value() const {
  return value_case() == kIntValue;
}
void ChannelArg::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
void ChannelArg::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = 0;
    clear_has_value();
  }
}
::google::protobuf::int32 ChannelArg::int_value() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ChannelArg.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return 0;
}
void ChannelArg::set_int_value(::google::protobuf::int32 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ChannelArg.int_value)
}

bool ChannelArg::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void ChannelArg::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
ChannelArg::ValueCase ChannelArg::value_case() const {
  return ChannelArg::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientConfig::kServerTargetsFieldNumber;
const int ClientConfig::kClientTypeFieldNumber;
const int ClientConfig::kSecurityParamsFieldNumber;
const int ClientConfig::kOutstandingRpcsPerChannelFieldNumber;
const int ClientConfig::kClientChannelsFieldNumber;
const int ClientConfig::kAsyncClientThreadsFieldNumber;
const int ClientConfig::kRpcTypeFieldNumber;
const int ClientConfig::kLoadParamsFieldNumber;
const int ClientConfig::kPayloadConfigFieldNumber;
const int ClientConfig::kHistogramParamsFieldNumber;
const int ClientConfig::kCoreListFieldNumber;
const int ClientConfig::kCoreLimitFieldNumber;
const int ClientConfig::kOtherClientApiFieldNumber;
const int ClientConfig::kChannelArgsFieldNumber;
const int ClientConfig::kMessagesPerStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientConfig::ClientConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ClientConfig)
}
ClientConfig::ClientConfig(const ClientConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      server_targets_(from.server_targets_),
      core_list_(from.core_list_),
      channel_args_(from.channel_args_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  other_client_api_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.other_client_api().size() > 0) {
    other_client_api_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_client_api_);
  }
  if (from.has_security_params()) {
    security_params_ = new ::grpc::testing::SecurityParams(*from.security_params_);
  } else {
    security_params_ = NULL;
  }
  if (from.has_load_params()) {
    load_params_ = new ::grpc::testing::LoadParams(*from.load_params_);
  } else {
    load_params_ = NULL;
  }
  if (from.has_payload_config()) {
    payload_config_ = new ::grpc::testing::PayloadConfig(*from.payload_config_);
  } else {
    payload_config_ = NULL;
  }
  if (from.has_histogram_params()) {
    histogram_params_ = new ::grpc::testing::HistogramParams(*from.histogram_params_);
  } else {
    histogram_params_ = NULL;
  }
  ::memcpy(&client_type_, &from.client_type_,
    reinterpret_cast<char*>(&messages_per_stream_) -
    reinterpret_cast<char*>(&client_type_) + sizeof(messages_per_stream_));
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ClientConfig)
}

void ClientConfig::SharedCtor() {
  other_client_api_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&security_params_, 0, reinterpret_cast<char*>(&messages_per_stream_) -
    reinterpret_cast<char*>(&security_params_) + sizeof(messages_per_stream_));
  _cached_size_ = 0;
}

ClientConfig::~ClientConfig() {
  // @@protoc_insertion_point(destructor:grpc.testing.ClientConfig)
  SharedDtor();
}

void ClientConfig::SharedDtor() {
  other_client_api_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete security_params_;
  }
  if (this != internal_default_instance()) {
    delete load_params_;
  }
  if (this != internal_default_instance()) {
    delete payload_config_;
  }
  if (this != internal_default_instance()) {
    delete histogram_params_;
  }
}

void ClientConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConfig::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientConfig& ClientConfig::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientConfig* ClientConfig::New(::google::protobuf::Arena* arena) const {
  ClientConfig* n = new ClientConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ClientConfig)
  server_targets_.Clear();
  core_list_.Clear();
  channel_args_.Clear();
  other_client_api_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && security_params_ != NULL) {
    delete security_params_;
  }
  security_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && load_params_ != NULL) {
    delete load_params_;
  }
  load_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && payload_config_ != NULL) {
    delete payload_config_;
  }
  payload_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && histogram_params_ != NULL) {
    delete histogram_params_;
  }
  histogram_params_ = NULL;
  ::memset(&client_type_, 0, reinterpret_cast<char*>(&messages_per_stream_) -
    reinterpret_cast<char*>(&client_type_) + sizeof(messages_per_stream_));
}

bool ClientConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ClientConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string server_targets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_server_targets()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_targets(this->server_targets_size() - 1).data(),
            this->server_targets(this->server_targets_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.ClientConfig.server_targets"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.ClientType client_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::grpc::testing::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.SecurityParams security_params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 outstanding_rpcs_per_channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outstanding_rpcs_per_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 client_channels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 async_client_threads = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &async_client_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.RpcType rpc_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rpc_type(static_cast< ::grpc::testing::RpcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.LoadParams load_params = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.PayloadConfig payload_config = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.HistogramParams histogram_params = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_histogram_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 core_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_core_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(104u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_core_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_limit = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string other_client_api = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_client_api()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->other_client_api().data(), this->other_client_api().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.ClientConfig.other_client_api"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.testing.ChannelArg channel_args = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channel_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 messages_per_stream = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messages_per_stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ClientConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ClientConfig)
  return false;
#undef DO_
}

void ClientConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string server_targets = 1;
  for (int i = 0, n = this->server_targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_targets(i).data(), this->server_targets(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ClientConfig.server_targets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_targets(i), output);
  }

  // .grpc.testing.ClientType client_type = 2;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->client_type(), output);
  }

  // .grpc.testing.SecurityParams security_params = 3;
  if (this->has_security_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->security_params_, output);
  }

  // int32 outstanding_rpcs_per_channel = 4;
  if (this->outstanding_rpcs_per_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outstanding_rpcs_per_channel(), output);
  }

  // int32 client_channels = 5;
  if (this->client_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->client_channels(), output);
  }

  // int32 async_client_threads = 7;
  if (this->async_client_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->async_client_threads(), output);
  }

  // .grpc.testing.RpcType rpc_type = 8;
  if (this->rpc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->rpc_type(), output);
  }

  // .grpc.testing.LoadParams load_params = 10;
  if (this->has_load_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->load_params_, output);
  }

  // .grpc.testing.PayloadConfig payload_config = 11;
  if (this->has_payload_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->payload_config_, output);
  }

  // .grpc.testing.HistogramParams histogram_params = 12;
  if (this->has_histogram_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->histogram_params_, output);
  }

  // repeated int32 core_list = 13;
  if (this->core_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_core_list_cached_byte_size_);
  }
  for (int i = 0, n = this->core_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->core_list(i), output);
  }

  // int32 core_limit = 14;
  if (this->core_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->core_limit(), output);
  }

  // string other_client_api = 15;
  if (this->other_client_api().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other_client_api().data(), this->other_client_api().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ClientConfig.other_client_api");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->other_client_api(), output);
  }

  // repeated .grpc.testing.ChannelArg channel_args = 16;
  for (unsigned int i = 0, n = this->channel_args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->channel_args(i), output);
  }

  // int32 messages_per_stream = 18;
  if (this->messages_per_stream() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->messages_per_stream(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ClientConfig)
}

::google::protobuf::uint8* ClientConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ClientConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string server_targets = 1;
  for (int i = 0, n = this->server_targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_targets(i).data(), this->server_targets(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ClientConfig.server_targets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->server_targets(i), target);
  }

  // .grpc.testing.ClientType client_type = 2;
  if (this->client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->client_type(), target);
  }

  // .grpc.testing.SecurityParams security_params = 3;
  if (this->has_security_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->security_params_, deterministic, target);
  }

  // int32 outstanding_rpcs_per_channel = 4;
  if (this->outstanding_rpcs_per_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outstanding_rpcs_per_channel(), target);
  }

  // int32 client_channels = 5;
  if (this->client_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->client_channels(), target);
  }

  // int32 async_client_threads = 7;
  if (this->async_client_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->async_client_threads(), target);
  }

  // .grpc.testing.RpcType rpc_type = 8;
  if (this->rpc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->rpc_type(), target);
  }

  // .grpc.testing.LoadParams load_params = 10;
  if (this->has_load_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->load_params_, deterministic, target);
  }

  // .grpc.testing.PayloadConfig payload_config = 11;
  if (this->has_payload_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->payload_config_, deterministic, target);
  }

  // .grpc.testing.HistogramParams histogram_params = 12;
  if (this->has_histogram_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->histogram_params_, deterministic, target);
  }

  // repeated int32 core_list = 13;
  if (this->core_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _core_list_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->core_list_, target);
  }

  // int32 core_limit = 14;
  if (this->core_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->core_limit(), target);
  }

  // string other_client_api = 15;
  if (this->other_client_api().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other_client_api().data(), this->other_client_api().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ClientConfig.other_client_api");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->other_client_api(), target);
  }

  // repeated .grpc.testing.ChannelArg channel_args = 16;
  for (unsigned int i = 0, n = this->channel_args_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->channel_args(i), deterministic, target);
  }

  // int32 messages_per_stream = 18;
  if (this->messages_per_stream() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->messages_per_stream(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ClientConfig)
  return target;
}

size_t ClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ClientConfig)
  size_t total_size = 0;

  // repeated string server_targets = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->server_targets_size());
  for (int i = 0, n = this->server_targets_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->server_targets(i));
  }

  // repeated int32 core_list = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->core_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _core_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .grpc.testing.ChannelArg channel_args = 16;
  {
    unsigned int count = this->channel_args_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_args(i));
    }
  }

  // string other_client_api = 15;
  if (this->other_client_api().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->other_client_api());
  }

  // .grpc.testing.SecurityParams security_params = 3;
  if (this->has_security_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->security_params_);
  }

  // .grpc.testing.LoadParams load_params = 10;
  if (this->has_load_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->load_params_);
  }

  // .grpc.testing.PayloadConfig payload_config = 11;
  if (this->has_payload_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_config_);
  }

  // .grpc.testing.HistogramParams histogram_params = 12;
  if (this->has_histogram_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->histogram_params_);
  }

  // .grpc.testing.ClientType client_type = 2;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  // int32 outstanding_rpcs_per_channel = 4;
  if (this->outstanding_rpcs_per_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->outstanding_rpcs_per_channel());
  }

  // int32 client_channels = 5;
  if (this->client_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_channels());
  }

  // int32 async_client_threads = 7;
  if (this->async_client_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->async_client_threads());
  }

  // .grpc.testing.RpcType rpc_type = 8;
  if (this->rpc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpc_type());
  }

  // int32 core_limit = 14;
  if (this->core_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_limit());
  }

  // int32 messages_per_stream = 18;
  if (this->messages_per_stream() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messages_per_stream());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ClientConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ClientConfig)
    MergeFrom(*source);
  }
}

void ClientConfig::MergeFrom(const ClientConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ClientConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_targets_.MergeFrom(from.server_targets_);
  core_list_.MergeFrom(from.core_list_);
  channel_args_.MergeFrom(from.channel_args_);
  if (from.other_client_api().size() > 0) {

    other_client_api_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_client_api_);
  }
  if (from.has_security_params()) {
    mutable_security_params()->::grpc::testing::SecurityParams::MergeFrom(from.security_params());
  }
  if (from.has_load_params()) {
    mutable_load_params()->::grpc::testing::LoadParams::MergeFrom(from.load_params());
  }
  if (from.has_payload_config()) {
    mutable_payload_config()->::grpc::testing::PayloadConfig::MergeFrom(from.payload_config());
  }
  if (from.has_histogram_params()) {
    mutable_histogram_params()->::grpc::testing::HistogramParams::MergeFrom(from.histogram_params());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
  if (from.outstanding_rpcs_per_channel() != 0) {
    set_outstanding_rpcs_per_channel(from.outstanding_rpcs_per_channel());
  }
  if (from.client_channels() != 0) {
    set_client_channels(from.client_channels());
  }
  if (from.async_client_threads() != 0) {
    set_async_client_threads(from.async_client_threads());
  }
  if (from.rpc_type() != 0) {
    set_rpc_type(from.rpc_type());
  }
  if (from.core_limit() != 0) {
    set_core_limit(from.core_limit());
  }
  if (from.messages_per_stream() != 0) {
    set_messages_per_stream(from.messages_per_stream());
  }
}

void ClientConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConfig::CopyFrom(const ClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfig::IsInitialized() const {
  return true;
}

void ClientConfig::Swap(ClientConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientConfig::InternalSwap(ClientConfig* other) {
  server_targets_.InternalSwap(&other->server_targets_);
  core_list_.InternalSwap(&other->core_list_);
  channel_args_.InternalSwap(&other->channel_args_);
  other_client_api_.Swap(&other->other_client_api_);
  std::swap(security_params_, other->security_params_);
  std::swap(load_params_, other->load_params_);
  std::swap(payload_config_, other->payload_config_);
  std::swap(histogram_params_, other->histogram_params_);
  std::swap(client_type_, other->client_type_);
  std::swap(outstanding_rpcs_per_channel_, other->outstanding_rpcs_per_channel_);
  std::swap(client_channels_, other->client_channels_);
  std::swap(async_client_threads_, other->async_client_threads_);
  std::swap(rpc_type_, other->rpc_type_);
  std::swap(core_limit_, other->core_limit_);
  std::swap(messages_per_stream_, other->messages_per_stream_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientConfig::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientConfig

// repeated string server_targets = 1;
int ClientConfig::server_targets_size() const {
  return server_targets_.size();
}
void ClientConfig::clear_server_targets() {
  server_targets_.Clear();
}
const ::std::string& ClientConfig::server_targets(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.server_targets)
  return server_targets_.Get(index);
}
::std::string* ClientConfig::mutable_server_targets(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.server_targets)
  return server_targets_.Mutable(index);
}
void ClientConfig::set_server_targets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.server_targets)
  server_targets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ClientConfig::set_server_targets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.server_targets)
  server_targets_.Mutable(index)->assign(std::move(value));
}
#endif
void ClientConfig::set_server_targets(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  server_targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.testing.ClientConfig.server_targets)
}
void ClientConfig::set_server_targets(int index, const char* value, size_t size) {
  server_targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.ClientConfig.server_targets)
}
::std::string* ClientConfig::add_server_targets() {
  // @@protoc_insertion_point(field_add_mutable:grpc.testing.ClientConfig.server_targets)
  return server_targets_.Add();
}
void ClientConfig::add_server_targets(const ::std::string& value) {
  server_targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.testing.ClientConfig.server_targets)
}
#if LANG_CXX11
void ClientConfig::add_server_targets(::std::string&& value) {
  server_targets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.testing.ClientConfig.server_targets)
}
#endif
void ClientConfig::add_server_targets(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  server_targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.testing.ClientConfig.server_targets)
}
void ClientConfig::add_server_targets(const char* value, size_t size) {
  server_targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.testing.ClientConfig.server_targets)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientConfig::server_targets() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ClientConfig.server_targets)
  return server_targets_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ClientConfig::mutable_server_targets() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ClientConfig.server_targets)
  return &server_targets_;
}

// .grpc.testing.ClientType client_type = 2;
void ClientConfig::clear_client_type() {
  client_type_ = 0;
}
::grpc::testing::ClientType ClientConfig::client_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.client_type)
  return static_cast< ::grpc::testing::ClientType >(client_type_);
}
void ClientConfig::set_client_type(::grpc::testing::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.client_type)
}

// .grpc.testing.SecurityParams security_params = 3;
bool ClientConfig::has_security_params() const {
  return this != internal_default_instance() && security_params_ != NULL;
}
void ClientConfig::clear_security_params() {
  if (GetArenaNoVirtual() == NULL && security_params_ != NULL) delete security_params_;
  security_params_ = NULL;
}
const ::grpc::testing::SecurityParams& ClientConfig::security_params() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.security_params)
  return security_params_ != NULL ? *security_params_
                         : *::grpc::testing::SecurityParams::internal_default_instance();
}
::grpc::testing::SecurityParams* ClientConfig::mutable_security_params() {
  
  if (security_params_ == NULL) {
    security_params_ = new ::grpc::testing::SecurityParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.security_params)
  return security_params_;
}
::grpc::testing::SecurityParams* ClientConfig::release_security_params() {
  // @@protoc_insertion_point(field_release:grpc.testing.ClientConfig.security_params)
  
  ::grpc::testing::SecurityParams* temp = security_params_;
  security_params_ = NULL;
  return temp;
}
void ClientConfig::set_allocated_security_params(::grpc::testing::SecurityParams* security_params) {
  delete security_params_;
  security_params_ = security_params;
  if (security_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientConfig.security_params)
}

// int32 outstanding_rpcs_per_channel = 4;
void ClientConfig::clear_outstanding_rpcs_per_channel() {
  outstanding_rpcs_per_channel_ = 0;
}
::google::protobuf::int32 ClientConfig::outstanding_rpcs_per_channel() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.outstanding_rpcs_per_channel)
  return outstanding_rpcs_per_channel_;
}
void ClientConfig::set_outstanding_rpcs_per_channel(::google::protobuf::int32 value) {
  
  outstanding_rpcs_per_channel_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.outstanding_rpcs_per_channel)
}

// int32 client_channels = 5;
void ClientConfig::clear_client_channels() {
  client_channels_ = 0;
}
::google::protobuf::int32 ClientConfig::client_channels() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.client_channels)
  return client_channels_;
}
void ClientConfig::set_client_channels(::google::protobuf::int32 value) {
  
  client_channels_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.client_channels)
}

// int32 async_client_threads = 7;
void ClientConfig::clear_async_client_threads() {
  async_client_threads_ = 0;
}
::google::protobuf::int32 ClientConfig::async_client_threads() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.async_client_threads)
  return async_client_threads_;
}
void ClientConfig::set_async_client_threads(::google::protobuf::int32 value) {
  
  async_client_threads_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.async_client_threads)
}

// .grpc.testing.RpcType rpc_type = 8;
void ClientConfig::clear_rpc_type() {
  rpc_type_ = 0;
}
::grpc::testing::RpcType ClientConfig::rpc_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.rpc_type)
  return static_cast< ::grpc::testing::RpcType >(rpc_type_);
}
void ClientConfig::set_rpc_type(::grpc::testing::RpcType value) {
  
  rpc_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.rpc_type)
}

// .grpc.testing.LoadParams load_params = 10;
bool ClientConfig::has_load_params() const {
  return this != internal_default_instance() && load_params_ != NULL;
}
void ClientConfig::clear_load_params() {
  if (GetArenaNoVirtual() == NULL && load_params_ != NULL) delete load_params_;
  load_params_ = NULL;
}
const ::grpc::testing::LoadParams& ClientConfig::load_params() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.load_params)
  return load_params_ != NULL ? *load_params_
                         : *::grpc::testing::LoadParams::internal_default_instance();
}
::grpc::testing::LoadParams* ClientConfig::mutable_load_params() {
  
  if (load_params_ == NULL) {
    load_params_ = new ::grpc::testing::LoadParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.load_params)
  return load_params_;
}
::grpc::testing::LoadParams* ClientConfig::release_load_params() {
  // @@protoc_insertion_point(field_release:grpc.testing.ClientConfig.load_params)
  
  ::grpc::testing::LoadParams* temp = load_params_;
  load_params_ = NULL;
  return temp;
}
void ClientConfig::set_allocated_load_params(::grpc::testing::LoadParams* load_params) {
  delete load_params_;
  load_params_ = load_params;
  if (load_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientConfig.load_params)
}

// .grpc.testing.PayloadConfig payload_config = 11;
bool ClientConfig::has_payload_config() const {
  return this != internal_default_instance() && payload_config_ != NULL;
}
void ClientConfig::clear_payload_config() {
  if (GetArenaNoVirtual() == NULL && payload_config_ != NULL) delete payload_config_;
  payload_config_ = NULL;
}
const ::grpc::testing::PayloadConfig& ClientConfig::payload_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.payload_config)
  return payload_config_ != NULL ? *payload_config_
                         : *::grpc::testing::PayloadConfig::internal_default_instance();
}
::grpc::testing::PayloadConfig* ClientConfig::mutable_payload_config() {
  
  if (payload_config_ == NULL) {
    payload_config_ = new ::grpc::testing::PayloadConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.payload_config)
  return payload_config_;
}
::grpc::testing::PayloadConfig* ClientConfig::release_payload_config() {
  // @@protoc_insertion_point(field_release:grpc.testing.ClientConfig.payload_config)
  
  ::grpc::testing::PayloadConfig* temp = payload_config_;
  payload_config_ = NULL;
  return temp;
}
void ClientConfig::set_allocated_payload_config(::grpc::testing::PayloadConfig* payload_config) {
  delete payload_config_;
  payload_config_ = payload_config;
  if (payload_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientConfig.payload_config)
}

// .grpc.testing.HistogramParams histogram_params = 12;
bool ClientConfig::has_histogram_params() const {
  return this != internal_default_instance() && histogram_params_ != NULL;
}
void ClientConfig::clear_histogram_params() {
  if (GetArenaNoVirtual() == NULL && histogram_params_ != NULL) delete histogram_params_;
  histogram_params_ = NULL;
}
const ::grpc::testing::HistogramParams& ClientConfig::histogram_params() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.histogram_params)
  return histogram_params_ != NULL ? *histogram_params_
                         : *::grpc::testing::HistogramParams::internal_default_instance();
}
::grpc::testing::HistogramParams* ClientConfig::mutable_histogram_params() {
  
  if (histogram_params_ == NULL) {
    histogram_params_ = new ::grpc::testing::HistogramParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.histogram_params)
  return histogram_params_;
}
::grpc::testing::HistogramParams* ClientConfig::release_histogram_params() {
  // @@protoc_insertion_point(field_release:grpc.testing.ClientConfig.histogram_params)
  
  ::grpc::testing::HistogramParams* temp = histogram_params_;
  histogram_params_ = NULL;
  return temp;
}
void ClientConfig::set_allocated_histogram_params(::grpc::testing::HistogramParams* histogram_params) {
  delete histogram_params_;
  histogram_params_ = histogram_params;
  if (histogram_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientConfig.histogram_params)
}

// repeated int32 core_list = 13;
int ClientConfig::core_list_size() const {
  return core_list_.size();
}
void ClientConfig::clear_core_list() {
  core_list_.Clear();
}
::google::protobuf::int32 ClientConfig::core_list(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.core_list)
  return core_list_.Get(index);
}
void ClientConfig::set_core_list(int index, ::google::protobuf::int32 value) {
  core_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.core_list)
}
void ClientConfig::add_core_list(::google::protobuf::int32 value) {
  core_list_.Add(value);
  // @@protoc_insertion_point(field_add:grpc.testing.ClientConfig.core_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientConfig::core_list() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ClientConfig.core_list)
  return core_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientConfig::mutable_core_list() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ClientConfig.core_list)
  return &core_list_;
}

// int32 core_limit = 14;
void ClientConfig::clear_core_limit() {
  core_limit_ = 0;
}
::google::protobuf::int32 ClientConfig::core_limit() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.core_limit)
  return core_limit_;
}
void ClientConfig::set_core_limit(::google::protobuf::int32 value) {
  
  core_limit_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.core_limit)
}

// string other_client_api = 15;
void ClientConfig::clear_other_client_api() {
  other_client_api_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientConfig::other_client_api() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.other_client_api)
  return other_client_api_.GetNoArena();
}
void ClientConfig::set_other_client_api(const ::std::string& value) {
  
  other_client_api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.other_client_api)
}
#if LANG_CXX11
void ClientConfig::set_other_client_api(::std::string&& value) {
  
  other_client_api_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.ClientConfig.other_client_api)
}
#endif
void ClientConfig::set_other_client_api(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  other_client_api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.ClientConfig.other_client_api)
}
void ClientConfig::set_other_client_api(const char* value, size_t size) {
  
  other_client_api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.ClientConfig.other_client_api)
}
::std::string* ClientConfig::mutable_other_client_api() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.other_client_api)
  return other_client_api_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientConfig::release_other_client_api() {
  // @@protoc_insertion_point(field_release:grpc.testing.ClientConfig.other_client_api)
  
  return other_client_api_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConfig::set_allocated_other_client_api(::std::string* other_client_api) {
  if (other_client_api != NULL) {
    
  } else {
    
  }
  other_client_api_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other_client_api);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientConfig.other_client_api)
}

// repeated .grpc.testing.ChannelArg channel_args = 16;
int ClientConfig::channel_args_size() const {
  return channel_args_.size();
}
void ClientConfig::clear_channel_args() {
  channel_args_.Clear();
}
const ::grpc::testing::ChannelArg& ClientConfig::channel_args(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.channel_args)
  return channel_args_.Get(index);
}
::grpc::testing::ChannelArg* ClientConfig::mutable_channel_args(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.channel_args)
  return channel_args_.Mutable(index);
}
::grpc::testing::ChannelArg* ClientConfig::add_channel_args() {
  // @@protoc_insertion_point(field_add:grpc.testing.ClientConfig.channel_args)
  return channel_args_.Add();
}
::google::protobuf::RepeatedPtrField< ::grpc::testing::ChannelArg >*
ClientConfig::mutable_channel_args() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ClientConfig.channel_args)
  return &channel_args_;
}
const ::google::protobuf::RepeatedPtrField< ::grpc::testing::ChannelArg >&
ClientConfig::channel_args() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ClientConfig.channel_args)
  return channel_args_;
}

// int32 messages_per_stream = 18;
void ClientConfig::clear_messages_per_stream() {
  messages_per_stream_ = 0;
}
::google::protobuf::int32 ClientConfig::messages_per_stream() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.messages_per_stream)
  return messages_per_stream_;
}
void ClientConfig::set_messages_per_stream(::google::protobuf::int32 value) {
  
  messages_per_stream_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.messages_per_stream)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientStatus::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientStatus::ClientStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ClientStatus)
}
ClientStatus::ClientStatus(const ClientStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::grpc::testing::ClientStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ClientStatus)
}

void ClientStatus::SharedCtor() {
  stats_ = NULL;
  _cached_size_ = 0;
}

ClientStatus::~ClientStatus() {
  // @@protoc_insertion_point(destructor:grpc.testing.ClientStatus)
  SharedDtor();
}

void ClientStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stats_;
  }
}

void ClientStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStatus::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientStatus& ClientStatus::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientStatus* ClientStatus::New(::google::protobuf::Arena* arena) const {
  ClientStatus* n = new ClientStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ClientStatus)
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
}

bool ClientStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ClientStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.ClientStats stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ClientStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ClientStatus)
  return false;
#undef DO_
}

void ClientStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ClientStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ClientStats stats = 1;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ClientStatus)
}

::google::protobuf::uint8* ClientStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ClientStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ClientStats stats = 1;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stats_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ClientStatus)
  return target;
}

size_t ClientStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ClientStatus)
  size_t total_size = 0;

  // .grpc.testing.ClientStats stats = 1;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ClientStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ClientStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ClientStatus)
    MergeFrom(*source);
  }
}

void ClientStatus::MergeFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ClientStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stats()) {
    mutable_stats()->::grpc::testing::ClientStats::MergeFrom(from.stats());
  }
}

void ClientStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStatus::CopyFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStatus::IsInitialized() const {
  return true;
}

void ClientStatus::Swap(ClientStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientStatus::InternalSwap(ClientStatus* other) {
  std::swap(stats_, other->stats_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientStatus::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientStatus

// .grpc.testing.ClientStats stats = 1;
bool ClientStatus::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void ClientStatus::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::grpc::testing::ClientStats& ClientStatus::stats() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientStatus.stats)
  return stats_ != NULL ? *stats_
                         : *::grpc::testing::ClientStats::internal_default_instance();
}
::grpc::testing::ClientStats* ClientStatus::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::grpc::testing::ClientStats;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientStatus.stats)
  return stats_;
}
::grpc::testing::ClientStats* ClientStatus::release_stats() {
  // @@protoc_insertion_point(field_release:grpc.testing.ClientStatus.stats)
  
  ::grpc::testing::ClientStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void ClientStatus::set_allocated_stats(::grpc::testing::ClientStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientStatus.stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mark::kResetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mark::Mark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.Mark)
}
Mark::Mark(const Mark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reset_ = from.reset_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.Mark)
}

void Mark::SharedCtor() {
  reset_ = false;
  _cached_size_ = 0;
}

Mark::~Mark() {
  // @@protoc_insertion_point(destructor:grpc.testing.Mark)
  SharedDtor();
}

void Mark::SharedDtor() {
}

void Mark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mark::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mark& Mark::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mark* Mark::New(::google::protobuf::Arena* arena) const {
  Mark* n = new Mark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mark::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.Mark)
  reset_ = false;
}

bool Mark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.Mark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool reset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.Mark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.Mark)
  return false;
#undef DO_
}

void Mark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.Mark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reset = 1;
  if (this->reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reset(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.Mark)
}

::google::protobuf::uint8* Mark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.Mark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reset = 1;
  if (this->reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.Mark)
  return target;
}

size_t Mark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.Mark)
  size_t total_size = 0;

  // bool reset = 1;
  if (this->reset() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.Mark)
  GOOGLE_DCHECK_NE(&from, this);
  const Mark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.Mark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.Mark)
    MergeFrom(*source);
  }
}

void Mark::MergeFrom(const Mark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.Mark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reset() != 0) {
    set_reset(from.reset());
  }
}

void Mark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.Mark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mark::CopyFrom(const Mark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.Mark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mark::IsInitialized() const {
  return true;
}

void Mark::Swap(Mark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mark::InternalSwap(Mark* other) {
  std::swap(reset_, other->reset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mark::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mark

// bool reset = 1;
void Mark::clear_reset() {
  reset_ = false;
}
bool Mark::reset() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Mark.reset)
  return reset_;
}
void Mark::set_reset(bool value) {
  
  reset_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Mark.reset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientArgs::kSetupFieldNumber;
const int ClientArgs::kMarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientArgs::ClientArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ClientArgs)
}
ClientArgs::ClientArgs(const ClientArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_argtype();
  switch (from.argtype_case()) {
    case kSetup: {
      mutable_setup()->::grpc::testing::ClientConfig::MergeFrom(from.setup());
      break;
    }
    case kMark: {
      mutable_mark()->::grpc::testing::Mark::MergeFrom(from.mark());
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ClientArgs)
}

void ClientArgs::SharedCtor() {
  clear_has_argtype();
  _cached_size_ = 0;
}

ClientArgs::~ClientArgs() {
  // @@protoc_insertion_point(destructor:grpc.testing.ClientArgs)
  SharedDtor();
}

void ClientArgs::SharedDtor() {
  if (has_argtype()) {
    clear_argtype();
  }
}

void ClientArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientArgs::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientArgs& ClientArgs::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientArgs* ClientArgs::New(::google::protobuf::Arena* arena) const {
  ClientArgs* n = new ClientArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientArgs::clear_argtype() {
// @@protoc_insertion_point(one_of_clear_start:grpc.testing.ClientArgs)
  switch (argtype_case()) {
    case kSetup: {
      delete argtype_.setup_;
      break;
    }
    case kMark: {
      delete argtype_.mark_;
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARGTYPE_NOT_SET;
}


void ClientArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ClientArgs)
  clear_argtype();
}

bool ClientArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ClientArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.ClientConfig setup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.Mark mark = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ClientArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ClientArgs)
  return false;
#undef DO_
}

void ClientArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ClientArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ClientConfig setup = 1;
  if (has_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *argtype_.setup_, output);
  }

  // .grpc.testing.Mark mark = 2;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *argtype_.mark_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ClientArgs)
}

::google::protobuf::uint8* ClientArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ClientArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ClientConfig setup = 1;
  if (has_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *argtype_.setup_, deterministic, target);
  }

  // .grpc.testing.Mark mark = 2;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *argtype_.mark_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ClientArgs)
  return target;
}

size_t ClientArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ClientArgs)
  size_t total_size = 0;

  switch (argtype_case()) {
    // .grpc.testing.ClientConfig setup = 1;
    case kSetup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *argtype_.setup_);
      break;
    }
    // .grpc.testing.Mark mark = 2;
    case kMark: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *argtype_.mark_);
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ClientArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientArgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ClientArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ClientArgs)
    MergeFrom(*source);
  }
}

void ClientArgs::MergeFrom(const ClientArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ClientArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.argtype_case()) {
    case kSetup: {
      mutable_setup()->::grpc::testing::ClientConfig::MergeFrom(from.setup());
      break;
    }
    case kMark: {
      mutable_mark()->::grpc::testing::Mark::MergeFrom(from.mark());
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
}

void ClientArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ClientArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientArgs::CopyFrom(const ClientArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ClientArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientArgs::IsInitialized() const {
  return true;
}

void ClientArgs::Swap(ClientArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientArgs::InternalSwap(ClientArgs* other) {
  std::swap(argtype_, other->argtype_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientArgs::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientArgs

// .grpc.testing.ClientConfig setup = 1;
bool ClientArgs::has_setup() const {
  return argtype_case() == kSetup;
}
void ClientArgs::set_has_setup() {
  _oneof_case_[0] = kSetup;
}
void ClientArgs::clear_setup() {
  if (has_setup()) {
    delete argtype_.setup_;
    clear_has_argtype();
  }
}
 const ::grpc::testing::ClientConfig& ClientArgs::setup() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientArgs.setup)
  return has_setup()
      ? *argtype_.setup_
      : ::grpc::testing::ClientConfig::default_instance();
}
::grpc::testing::ClientConfig* ClientArgs::mutable_setup() {
  if (!has_setup()) {
    clear_argtype();
    set_has_setup();
    argtype_.setup_ = new ::grpc::testing::ClientConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientArgs.setup)
  return argtype_.setup_;
}
::grpc::testing::ClientConfig* ClientArgs::release_setup() {
  // @@protoc_insertion_point(field_release:grpc.testing.ClientArgs.setup)
  if (has_setup()) {
    clear_has_argtype();
    ::grpc::testing::ClientConfig* temp = argtype_.setup_;
    argtype_.setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientArgs::set_allocated_setup(::grpc::testing::ClientConfig* setup) {
  clear_argtype();
  if (setup) {
    set_has_setup();
    argtype_.setup_ = setup;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientArgs.setup)
}

// .grpc.testing.Mark mark = 2;
bool ClientArgs::has_mark() const {
  return argtype_case() == kMark;
}
void ClientArgs::set_has_mark() {
  _oneof_case_[0] = kMark;
}
void ClientArgs::clear_mark() {
  if (has_mark()) {
    delete argtype_.mark_;
    clear_has_argtype();
  }
}
 const ::grpc::testing::Mark& ClientArgs::mark() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientArgs.mark)
  return has_mark()
      ? *argtype_.mark_
      : ::grpc::testing::Mark::default_instance();
}
::grpc::testing::Mark* ClientArgs::mutable_mark() {
  if (!has_mark()) {
    clear_argtype();
    set_has_mark();
    argtype_.mark_ = new ::grpc::testing::Mark;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientArgs.mark)
  return argtype_.mark_;
}
::grpc::testing::Mark* ClientArgs::release_mark() {
  // @@protoc_insertion_point(field_release:grpc.testing.ClientArgs.mark)
  if (has_mark()) {
    clear_has_argtype();
    ::grpc::testing::Mark* temp = argtype_.mark_;
    argtype_.mark_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientArgs::set_allocated_mark(::grpc::testing::Mark* mark) {
  clear_argtype();
  if (mark) {
    set_has_mark();
    argtype_.mark_ = mark;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientArgs.mark)
}

bool ClientArgs::has_argtype() const {
  return argtype_case() != ARGTYPE_NOT_SET;
}
void ClientArgs::clear_has_argtype() {
  _oneof_case_[0] = ARGTYPE_NOT_SET;
}
ClientArgs::ArgtypeCase ClientArgs::argtype_case() const {
  return ClientArgs::ArgtypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig::kServerTypeFieldNumber;
const int ServerConfig::kSecurityParamsFieldNumber;
const int ServerConfig::kPortFieldNumber;
const int ServerConfig::kAsyncServerThreadsFieldNumber;
const int ServerConfig::kCoreLimitFieldNumber;
const int ServerConfig::kPayloadConfigFieldNumber;
const int ServerConfig::kCoreListFieldNumber;
const int ServerConfig::kOtherServerApiFieldNumber;
const int ServerConfig::kResourceQuotaSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig::ServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ServerConfig)
}
ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      core_list_(from.core_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  other_server_api_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.other_server_api().size() > 0) {
    other_server_api_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_server_api_);
  }
  if (from.has_security_params()) {
    security_params_ = new ::grpc::testing::SecurityParams(*from.security_params_);
  } else {
    security_params_ = NULL;
  }
  if (from.has_payload_config()) {
    payload_config_ = new ::grpc::testing::PayloadConfig(*from.payload_config_);
  } else {
    payload_config_ = NULL;
  }
  ::memcpy(&server_type_, &from.server_type_,
    reinterpret_cast<char*>(&resource_quota_size_) -
    reinterpret_cast<char*>(&server_type_) + sizeof(resource_quota_size_));
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ServerConfig)
}

void ServerConfig::SharedCtor() {
  other_server_api_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&security_params_, 0, reinterpret_cast<char*>(&resource_quota_size_) -
    reinterpret_cast<char*>(&security_params_) + sizeof(resource_quota_size_));
  _cached_size_ = 0;
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:grpc.testing.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  other_server_api_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete security_params_;
  }
  if (this != internal_default_instance()) {
    delete payload_config_;
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerConfig& ServerConfig::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerConfig* ServerConfig::New(::google::protobuf::Arena* arena) const {
  ServerConfig* n = new ServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ServerConfig)
  core_list_.Clear();
  other_server_api_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && security_params_ != NULL) {
    delete security_params_;
  }
  security_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && payload_config_ != NULL) {
    delete payload_config_;
  }
  payload_config_ = NULL;
  ::memset(&server_type_, 0, reinterpret_cast<char*>(&resource_quota_size_) -
    reinterpret_cast<char*>(&server_type_) + sizeof(resource_quota_size_));
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.ServerType server_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_server_type(static_cast< ::grpc::testing::ServerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.SecurityParams security_params = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 async_server_threads = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &async_server_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_limit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.PayloadConfig payload_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 core_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_core_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(80u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82u, input, this->mutable_core_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string other_server_api = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_server_api()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->other_server_api().data(), this->other_server_api().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.ServerConfig.other_server_api"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 resource_quota_size = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8008u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_quota_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ServerType server_type = 1;
  if (this->server_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->server_type(), output);
  }

  // .grpc.testing.SecurityParams security_params = 2;
  if (this->has_security_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->security_params_, output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // int32 async_server_threads = 7;
  if (this->async_server_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->async_server_threads(), output);
  }

  // int32 core_limit = 8;
  if (this->core_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->core_limit(), output);
  }

  // .grpc.testing.PayloadConfig payload_config = 9;
  if (this->has_payload_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->payload_config_, output);
  }

  // repeated int32 core_list = 10;
  if (this->core_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_core_list_cached_byte_size_);
  }
  for (int i = 0, n = this->core_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->core_list(i), output);
  }

  // string other_server_api = 11;
  if (this->other_server_api().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other_server_api().data(), this->other_server_api().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ServerConfig.other_server_api");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->other_server_api(), output);
  }

  // int32 resource_quota_size = 1001;
  if (this->resource_quota_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1001, this->resource_quota_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ServerType server_type = 1;
  if (this->server_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->server_type(), target);
  }

  // .grpc.testing.SecurityParams security_params = 2;
  if (this->has_security_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->security_params_, deterministic, target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // int32 async_server_threads = 7;
  if (this->async_server_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->async_server_threads(), target);
  }

  // int32 core_limit = 8;
  if (this->core_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->core_limit(), target);
  }

  // .grpc.testing.PayloadConfig payload_config = 9;
  if (this->has_payload_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->payload_config_, deterministic, target);
  }

  // repeated int32 core_list = 10;
  if (this->core_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _core_list_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->core_list_, target);
  }

  // string other_server_api = 11;
  if (this->other_server_api().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other_server_api().data(), this->other_server_api().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.ServerConfig.other_server_api");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->other_server_api(), target);
  }

  // int32 resource_quota_size = 1001;
  if (this->resource_quota_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1001, this->resource_quota_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ServerConfig)
  return target;
}

size_t ServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ServerConfig)
  size_t total_size = 0;

  // repeated int32 core_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->core_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _core_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string other_server_api = 11;
  if (this->other_server_api().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->other_server_api());
  }

  // .grpc.testing.SecurityParams security_params = 2;
  if (this->has_security_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->security_params_);
  }

  // .grpc.testing.PayloadConfig payload_config = 9;
  if (this->has_payload_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_config_);
  }

  // .grpc.testing.ServerType server_type = 1;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 async_server_threads = 7;
  if (this->async_server_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->async_server_threads());
  }

  // int32 core_limit = 8;
  if (this->core_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_limit());
  }

  // int32 resource_quota_size = 1001;
  if (this->resource_quota_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resource_quota_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  core_list_.MergeFrom(from.core_list_);
  if (from.other_server_api().size() > 0) {

    other_server_api_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_server_api_);
  }
  if (from.has_security_params()) {
    mutable_security_params()->::grpc::testing::SecurityParams::MergeFrom(from.security_params());
  }
  if (from.has_payload_config()) {
    mutable_payload_config()->::grpc::testing::PayloadConfig::MergeFrom(from.payload_config());
  }
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.async_server_threads() != 0) {
    set_async_server_threads(from.async_server_threads());
  }
  if (from.core_limit() != 0) {
    set_core_limit(from.core_limit());
  }
  if (from.resource_quota_size() != 0) {
    set_resource_quota_size(from.resource_quota_size());
  }
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig::InternalSwap(ServerConfig* other) {
  core_list_.InternalSwap(&other->core_list_);
  other_server_api_.Swap(&other->other_server_api_);
  std::swap(security_params_, other->security_params_);
  std::swap(payload_config_, other->payload_config_);
  std::swap(server_type_, other->server_type_);
  std::swap(port_, other->port_);
  std::swap(async_server_threads_, other->async_server_threads_);
  std::swap(core_limit_, other->core_limit_);
  std::swap(resource_quota_size_, other->resource_quota_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerConfig

// .grpc.testing.ServerType server_type = 1;
void ServerConfig::clear_server_type() {
  server_type_ = 0;
}
::grpc::testing::ServerType ServerConfig::server_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.server_type)
  return static_cast< ::grpc::testing::ServerType >(server_type_);
}
void ServerConfig::set_server_type(::grpc::testing::ServerType value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.server_type)
}

// .grpc.testing.SecurityParams security_params = 2;
bool ServerConfig::has_security_params() const {
  return this != internal_default_instance() && security_params_ != NULL;
}
void ServerConfig::clear_security_params() {
  if (GetArenaNoVirtual() == NULL && security_params_ != NULL) delete security_params_;
  security_params_ = NULL;
}
const ::grpc::testing::SecurityParams& ServerConfig::security_params() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.security_params)
  return security_params_ != NULL ? *security_params_
                         : *::grpc::testing::SecurityParams::internal_default_instance();
}
::grpc::testing::SecurityParams* ServerConfig::mutable_security_params() {
  
  if (security_params_ == NULL) {
    security_params_ = new ::grpc::testing::SecurityParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerConfig.security_params)
  return security_params_;
}
::grpc::testing::SecurityParams* ServerConfig::release_security_params() {
  // @@protoc_insertion_point(field_release:grpc.testing.ServerConfig.security_params)
  
  ::grpc::testing::SecurityParams* temp = security_params_;
  security_params_ = NULL;
  return temp;
}
void ServerConfig::set_allocated_security_params(::grpc::testing::SecurityParams* security_params) {
  delete security_params_;
  security_params_ = security_params;
  if (security_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerConfig.security_params)
}

// int32 port = 4;
void ServerConfig::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 ServerConfig::port() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.port)
  return port_;
}
void ServerConfig::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.port)
}

// int32 async_server_threads = 7;
void ServerConfig::clear_async_server_threads() {
  async_server_threads_ = 0;
}
::google::protobuf::int32 ServerConfig::async_server_threads() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.async_server_threads)
  return async_server_threads_;
}
void ServerConfig::set_async_server_threads(::google::protobuf::int32 value) {
  
  async_server_threads_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.async_server_threads)
}

// int32 core_limit = 8;
void ServerConfig::clear_core_limit() {
  core_limit_ = 0;
}
::google::protobuf::int32 ServerConfig::core_limit() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.core_limit)
  return core_limit_;
}
void ServerConfig::set_core_limit(::google::protobuf::int32 value) {
  
  core_limit_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.core_limit)
}

// .grpc.testing.PayloadConfig payload_config = 9;
bool ServerConfig::has_payload_config() const {
  return this != internal_default_instance() && payload_config_ != NULL;
}
void ServerConfig::clear_payload_config() {
  if (GetArenaNoVirtual() == NULL && payload_config_ != NULL) delete payload_config_;
  payload_config_ = NULL;
}
const ::grpc::testing::PayloadConfig& ServerConfig::payload_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.payload_config)
  return payload_config_ != NULL ? *payload_config_
                         : *::grpc::testing::PayloadConfig::internal_default_instance();
}
::grpc::testing::PayloadConfig* ServerConfig::mutable_payload_config() {
  
  if (payload_config_ == NULL) {
    payload_config_ = new ::grpc::testing::PayloadConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerConfig.payload_config)
  return payload_config_;
}
::grpc::testing::PayloadConfig* ServerConfig::release_payload_config() {
  // @@protoc_insertion_point(field_release:grpc.testing.ServerConfig.payload_config)
  
  ::grpc::testing::PayloadConfig* temp = payload_config_;
  payload_config_ = NULL;
  return temp;
}
void ServerConfig::set_allocated_payload_config(::grpc::testing::PayloadConfig* payload_config) {
  delete payload_config_;
  payload_config_ = payload_config;
  if (payload_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerConfig.payload_config)
}

// repeated int32 core_list = 10;
int ServerConfig::core_list_size() const {
  return core_list_.size();
}
void ServerConfig::clear_core_list() {
  core_list_.Clear();
}
::google::protobuf::int32 ServerConfig::core_list(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.core_list)
  return core_list_.Get(index);
}
void ServerConfig::set_core_list(int index, ::google::protobuf::int32 value) {
  core_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.core_list)
}
void ServerConfig::add_core_list(::google::protobuf::int32 value) {
  core_list_.Add(value);
  // @@protoc_insertion_point(field_add:grpc.testing.ServerConfig.core_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ServerConfig::core_list() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ServerConfig.core_list)
  return core_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ServerConfig::mutable_core_list() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ServerConfig.core_list)
  return &core_list_;
}

// string other_server_api = 11;
void ServerConfig::clear_other_server_api() {
  other_server_api_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerConfig::other_server_api() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.other_server_api)
  return other_server_api_.GetNoArena();
}
void ServerConfig::set_other_server_api(const ::std::string& value) {
  
  other_server_api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.other_server_api)
}
#if LANG_CXX11
void ServerConfig::set_other_server_api(::std::string&& value) {
  
  other_server_api_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.ServerConfig.other_server_api)
}
#endif
void ServerConfig::set_other_server_api(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  other_server_api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.ServerConfig.other_server_api)
}
void ServerConfig::set_other_server_api(const char* value, size_t size) {
  
  other_server_api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.ServerConfig.other_server_api)
}
::std::string* ServerConfig::mutable_other_server_api() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerConfig.other_server_api)
  return other_server_api_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerConfig::release_other_server_api() {
  // @@protoc_insertion_point(field_release:grpc.testing.ServerConfig.other_server_api)
  
  return other_server_api_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerConfig::set_allocated_other_server_api(::std::string* other_server_api) {
  if (other_server_api != NULL) {
    
  } else {
    
  }
  other_server_api_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other_server_api);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerConfig.other_server_api)
}

// int32 resource_quota_size = 1001;
void ServerConfig::clear_resource_quota_size() {
  resource_quota_size_ = 0;
}
::google::protobuf::int32 ServerConfig::resource_quota_size() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.resource_quota_size)
  return resource_quota_size_;
}
void ServerConfig::set_resource_quota_size(::google::protobuf::int32 value) {
  
  resource_quota_size_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.resource_quota_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerArgs::kSetupFieldNumber;
const int ServerArgs::kMarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerArgs::ServerArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ServerArgs)
}
ServerArgs::ServerArgs(const ServerArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_argtype();
  switch (from.argtype_case()) {
    case kSetup: {
      mutable_setup()->::grpc::testing::ServerConfig::MergeFrom(from.setup());
      break;
    }
    case kMark: {
      mutable_mark()->::grpc::testing::Mark::MergeFrom(from.mark());
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ServerArgs)
}

void ServerArgs::SharedCtor() {
  clear_has_argtype();
  _cached_size_ = 0;
}

ServerArgs::~ServerArgs() {
  // @@protoc_insertion_point(destructor:grpc.testing.ServerArgs)
  SharedDtor();
}

void ServerArgs::SharedDtor() {
  if (has_argtype()) {
    clear_argtype();
  }
}

void ServerArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerArgs::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerArgs& ServerArgs::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerArgs* ServerArgs::New(::google::protobuf::Arena* arena) const {
  ServerArgs* n = new ServerArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerArgs::clear_argtype() {
// @@protoc_insertion_point(one_of_clear_start:grpc.testing.ServerArgs)
  switch (argtype_case()) {
    case kSetup: {
      delete argtype_.setup_;
      break;
    }
    case kMark: {
      delete argtype_.mark_;
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARGTYPE_NOT_SET;
}


void ServerArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ServerArgs)
  clear_argtype();
}

bool ServerArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ServerArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.ServerConfig setup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.Mark mark = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ServerArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ServerArgs)
  return false;
#undef DO_
}

void ServerArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ServerArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ServerConfig setup = 1;
  if (has_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *argtype_.setup_, output);
  }

  // .grpc.testing.Mark mark = 2;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *argtype_.mark_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ServerArgs)
}

::google::protobuf::uint8* ServerArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ServerArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ServerConfig setup = 1;
  if (has_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *argtype_.setup_, deterministic, target);
  }

  // .grpc.testing.Mark mark = 2;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *argtype_.mark_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ServerArgs)
  return target;
}

size_t ServerArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ServerArgs)
  size_t total_size = 0;

  switch (argtype_case()) {
    // .grpc.testing.ServerConfig setup = 1;
    case kSetup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *argtype_.setup_);
      break;
    }
    // .grpc.testing.Mark mark = 2;
    case kMark: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *argtype_.mark_);
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ServerArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerArgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ServerArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ServerArgs)
    MergeFrom(*source);
  }
}

void ServerArgs::MergeFrom(const ServerArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ServerArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.argtype_case()) {
    case kSetup: {
      mutable_setup()->::grpc::testing::ServerConfig::MergeFrom(from.setup());
      break;
    }
    case kMark: {
      mutable_mark()->::grpc::testing::Mark::MergeFrom(from.mark());
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
}

void ServerArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ServerArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerArgs::CopyFrom(const ServerArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ServerArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerArgs::IsInitialized() const {
  return true;
}

void ServerArgs::Swap(ServerArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerArgs::InternalSwap(ServerArgs* other) {
  std::swap(argtype_, other->argtype_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerArgs::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerArgs

// .grpc.testing.ServerConfig setup = 1;
bool ServerArgs::has_setup() const {
  return argtype_case() == kSetup;
}
void ServerArgs::set_has_setup() {
  _oneof_case_[0] = kSetup;
}
void ServerArgs::clear_setup() {
  if (has_setup()) {
    delete argtype_.setup_;
    clear_has_argtype();
  }
}
 const ::grpc::testing::ServerConfig& ServerArgs::setup() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerArgs.setup)
  return has_setup()
      ? *argtype_.setup_
      : ::grpc::testing::ServerConfig::default_instance();
}
::grpc::testing::ServerConfig* ServerArgs::mutable_setup() {
  if (!has_setup()) {
    clear_argtype();
    set_has_setup();
    argtype_.setup_ = new ::grpc::testing::ServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerArgs.setup)
  return argtype_.setup_;
}
::grpc::testing::ServerConfig* ServerArgs::release_setup() {
  // @@protoc_insertion_point(field_release:grpc.testing.ServerArgs.setup)
  if (has_setup()) {
    clear_has_argtype();
    ::grpc::testing::ServerConfig* temp = argtype_.setup_;
    argtype_.setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServerArgs::set_allocated_setup(::grpc::testing::ServerConfig* setup) {
  clear_argtype();
  if (setup) {
    set_has_setup();
    argtype_.setup_ = setup;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerArgs.setup)
}

// .grpc.testing.Mark mark = 2;
bool ServerArgs::has_mark() const {
  return argtype_case() == kMark;
}
void ServerArgs::set_has_mark() {
  _oneof_case_[0] = kMark;
}
void ServerArgs::clear_mark() {
  if (has_mark()) {
    delete argtype_.mark_;
    clear_has_argtype();
  }
}
 const ::grpc::testing::Mark& ServerArgs::mark() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerArgs.mark)
  return has_mark()
      ? *argtype_.mark_
      : ::grpc::testing::Mark::default_instance();
}
::grpc::testing::Mark* ServerArgs::mutable_mark() {
  if (!has_mark()) {
    clear_argtype();
    set_has_mark();
    argtype_.mark_ = new ::grpc::testing::Mark;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerArgs.mark)
  return argtype_.mark_;
}
::grpc::testing::Mark* ServerArgs::release_mark() {
  // @@protoc_insertion_point(field_release:grpc.testing.ServerArgs.mark)
  if (has_mark()) {
    clear_has_argtype();
    ::grpc::testing::Mark* temp = argtype_.mark_;
    argtype_.mark_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServerArgs::set_allocated_mark(::grpc::testing::Mark* mark) {
  clear_argtype();
  if (mark) {
    set_has_mark();
    argtype_.mark_ = mark;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerArgs.mark)
}

bool ServerArgs::has_argtype() const {
  return argtype_case() != ARGTYPE_NOT_SET;
}
void ServerArgs::clear_has_argtype() {
  _oneof_case_[0] = ARGTYPE_NOT_SET;
}
ServerArgs::ArgtypeCase ServerArgs::argtype_case() const {
  return ServerArgs::ArgtypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerStatus::kStatsFieldNumber;
const int ServerStatus::kPortFieldNumber;
const int ServerStatus::kCoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerStatus::ServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ServerStatus)
}
ServerStatus::ServerStatus(const ServerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::grpc::testing::ServerStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&cores_) -
    reinterpret_cast<char*>(&port_) + sizeof(cores_));
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ServerStatus)
}

void ServerStatus::SharedCtor() {
  ::memset(&stats_, 0, reinterpret_cast<char*>(&cores_) -
    reinterpret_cast<char*>(&stats_) + sizeof(cores_));
  _cached_size_ = 0;
}

ServerStatus::~ServerStatus() {
  // @@protoc_insertion_point(destructor:grpc.testing.ServerStatus)
  SharedDtor();
}

void ServerStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stats_;
  }
}

void ServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatus::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerStatus& ServerStatus::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerStatus* ServerStatus::New(::google::protobuf::Arena* arena) const {
  ServerStatus* n = new ServerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ServerStatus)
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  ::memset(&port_, 0, reinterpret_cast<char*>(&cores_) -
    reinterpret_cast<char*>(&port_) + sizeof(cores_));
}

bool ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ServerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.ServerStats stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cores = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ServerStatus)
  return false;
#undef DO_
}

void ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ServerStats stats = 1;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stats_, output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 cores = 3;
  if (this->cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cores(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ServerStatus)
}

::google::protobuf::uint8* ServerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.ServerStats stats = 1;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stats_, deterministic, target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 cores = 3;
  if (this->cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cores(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ServerStatus)
  return target;
}

size_t ServerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ServerStatus)
  size_t total_size = 0;

  // .grpc.testing.ServerStats stats = 1;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 cores = 3;
  if (this->cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cores());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ServerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ServerStatus)
    MergeFrom(*source);
  }
}

void ServerStatus::MergeFrom(const ServerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stats()) {
    mutable_stats()->::grpc::testing::ServerStats::MergeFrom(from.stats());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.cores() != 0) {
    set_cores(from.cores());
  }
}

void ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatus::CopyFrom(const ServerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatus::IsInitialized() const {
  return true;
}

void ServerStatus::Swap(ServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStatus::InternalSwap(ServerStatus* other) {
  std::swap(stats_, other->stats_);
  std::swap(port_, other->port_);
  std::swap(cores_, other->cores_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerStatus::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerStatus

// .grpc.testing.ServerStats stats = 1;
bool ServerStatus::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void ServerStatus::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::grpc::testing::ServerStats& ServerStatus::stats() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerStatus.stats)
  return stats_ != NULL ? *stats_
                         : *::grpc::testing::ServerStats::internal_default_instance();
}
::grpc::testing::ServerStats* ServerStatus::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::grpc::testing::ServerStats;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerStatus.stats)
  return stats_;
}
::grpc::testing::ServerStats* ServerStatus::release_stats() {
  // @@protoc_insertion_point(field_release:grpc.testing.ServerStatus.stats)
  
  ::grpc::testing::ServerStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void ServerStatus::set_allocated_stats(::grpc::testing::ServerStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerStatus.stats)
}

// int32 port = 2;
void ServerStatus::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 ServerStatus::port() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerStatus.port)
  return port_;
}
void ServerStatus::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerStatus.port)
}

// int32 cores = 3;
void ServerStatus::clear_cores() {
  cores_ = 0;
}
::google::protobuf::int32 ServerStatus::cores() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerStatus.cores)
  return cores_;
}
void ServerStatus::set_cores(::google::protobuf::int32 value) {
  
  cores_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerStatus.cores)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoreRequest::CoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.CoreRequest)
}
CoreRequest::CoreRequest(const CoreRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.CoreRequest)
}

void CoreRequest::SharedCtor() {
  _cached_size_ = 0;
}

CoreRequest::~CoreRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.CoreRequest)
  SharedDtor();
}

void CoreRequest::SharedDtor() {
}

void CoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoreRequest::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoreRequest& CoreRequest::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoreRequest* CoreRequest::New(::google::protobuf::Arena* arena) const {
  CoreRequest* n = new CoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.CoreRequest)
}

bool CoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.CoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.CoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.CoreRequest)
  return false;
#undef DO_
}

void CoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.CoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:grpc.testing.CoreRequest)
}

::google::protobuf::uint8* CoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.CoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.CoreRequest)
  return target;
}

size_t CoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.CoreRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.CoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CoreRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.CoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.CoreRequest)
    MergeFrom(*source);
  }
}

void CoreRequest::MergeFrom(const CoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.CoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.CoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoreRequest::CopyFrom(const CoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.CoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoreRequest::IsInitialized() const {
  return true;
}

void CoreRequest::Swap(CoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoreRequest::InternalSwap(CoreRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoreRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoreRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoreResponse::kCoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoreResponse::CoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.CoreResponse)
}
CoreResponse::CoreResponse(const CoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cores_ = from.cores_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.CoreResponse)
}

void CoreResponse::SharedCtor() {
  cores_ = 0;
  _cached_size_ = 0;
}

CoreResponse::~CoreResponse() {
  // @@protoc_insertion_point(destructor:grpc.testing.CoreResponse)
  SharedDtor();
}

void CoreResponse::SharedDtor() {
}

void CoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoreResponse::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoreResponse& CoreResponse::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoreResponse* CoreResponse::New(::google::protobuf::Arena* arena) const {
  CoreResponse* n = new CoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.CoreResponse)
  cores_ = 0;
}

bool CoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.CoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cores = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.CoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.CoreResponse)
  return false;
#undef DO_
}

void CoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.CoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cores = 1;
  if (this->cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cores(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.CoreResponse)
}

::google::protobuf::uint8* CoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.CoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cores = 1;
  if (this->cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cores(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.CoreResponse)
  return target;
}

size_t CoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.CoreResponse)
  size_t total_size = 0;

  // int32 cores = 1;
  if (this->cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cores());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.CoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CoreResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.CoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.CoreResponse)
    MergeFrom(*source);
  }
}

void CoreResponse::MergeFrom(const CoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.CoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cores() != 0) {
    set_cores(from.cores());
  }
}

void CoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.CoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoreResponse::CopyFrom(const CoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.CoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoreResponse::IsInitialized() const {
  return true;
}

void CoreResponse::Swap(CoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoreResponse::InternalSwap(CoreResponse* other) {
  std::swap(cores_, other->cores_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoreResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoreResponse

// int32 cores = 1;
void CoreResponse::clear_cores() {
  cores_ = 0;
}
::google::protobuf::int32 CoreResponse::cores() const {
  // @@protoc_insertion_point(field_get:grpc.testing.CoreResponse.cores)
  return cores_;
}
void CoreResponse::set_cores(::google::protobuf::int32 value) {
  
  cores_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.CoreResponse.cores)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Void::Void()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.Void)
}
Void::Void(const Void& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.Void)
}

void Void::SharedCtor() {
  _cached_size_ = 0;
}

Void::~Void() {
  // @@protoc_insertion_point(destructor:grpc.testing.Void)
  SharedDtor();
}

void Void::SharedDtor() {
}

void Void::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Void::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Void& Void::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Void* Void::New(::google::protobuf::Arena* arena) const {
  Void* n = new Void;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Void::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.Void)
}

bool Void::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.Void)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.Void)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.Void)
  return false;
#undef DO_
}

void Void::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.Void)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:grpc.testing.Void)
}

::google::protobuf::uint8* Void::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.Void)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.Void)
  return target;
}

size_t Void::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.Void)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Void::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.Void)
  GOOGLE_DCHECK_NE(&from, this);
  const Void* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Void>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.Void)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.Void)
    MergeFrom(*source);
  }
}

void Void::MergeFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.Void)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Void::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Void::CopyFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Void::IsInitialized() const {
  return true;
}

void Void::Swap(Void* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Void::InternalSwap(Void* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Void::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Void

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario::kNameFieldNumber;
const int Scenario::kClientConfigFieldNumber;
const int Scenario::kNumClientsFieldNumber;
const int Scenario::kServerConfigFieldNumber;
const int Scenario::kNumServersFieldNumber;
const int Scenario::kWarmupSecondsFieldNumber;
const int Scenario::kBenchmarkSecondsFieldNumber;
const int Scenario::kSpawnLocalWorkerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario::Scenario()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.Scenario)
}
Scenario::Scenario(const Scenario& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_client_config()) {
    client_config_ = new ::grpc::testing::ClientConfig(*from.client_config_);
  } else {
    client_config_ = NULL;
  }
  if (from.has_server_config()) {
    server_config_ = new ::grpc::testing::ServerConfig(*from.server_config_);
  } else {
    server_config_ = NULL;
  }
  ::memcpy(&num_clients_, &from.num_clients_,
    reinterpret_cast<char*>(&spawn_local_worker_count_) -
    reinterpret_cast<char*>(&num_clients_) + sizeof(spawn_local_worker_count_));
  // @@protoc_insertion_point(copy_constructor:grpc.testing.Scenario)
}

void Scenario::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_config_, 0, reinterpret_cast<char*>(&spawn_local_worker_count_) -
    reinterpret_cast<char*>(&client_config_) + sizeof(spawn_local_worker_count_));
  _cached_size_ = 0;
}

Scenario::~Scenario() {
  // @@protoc_insertion_point(destructor:grpc.testing.Scenario)
  SharedDtor();
}

void Scenario::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete client_config_;
  }
  if (this != internal_default_instance()) {
    delete server_config_;
  }
}

void Scenario::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scenario::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenario& Scenario::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scenario* Scenario::New(::google::protobuf::Arena* arena) const {
  Scenario* n = new Scenario;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scenario::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.Scenario)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && client_config_ != NULL) {
    delete client_config_;
  }
  client_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_config_ != NULL) {
    delete server_config_;
  }
  server_config_ = NULL;
  ::memset(&num_clients_, 0, reinterpret_cast<char*>(&spawn_local_worker_count_) -
    reinterpret_cast<char*>(&num_clients_) + sizeof(spawn_local_worker_count_));
}

bool Scenario::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.Scenario)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.Scenario.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.ClientConfig client_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_clients = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_clients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.ServerConfig server_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_servers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_servers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 warmup_seconds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warmup_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 benchmark_seconds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &benchmark_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 spawn_local_worker_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spawn_local_worker_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.Scenario)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.Scenario)
  return false;
#undef DO_
}

void Scenario::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.Scenario)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.Scenario.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .grpc.testing.ClientConfig client_config = 2;
  if (this->has_client_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->client_config_, output);
  }

  // int32 num_clients = 3;
  if (this->num_clients() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_clients(), output);
  }

  // .grpc.testing.ServerConfig server_config = 4;
  if (this->has_server_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->server_config_, output);
  }

  // int32 num_servers = 5;
  if (this->num_servers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_servers(), output);
  }

  // int32 warmup_seconds = 6;
  if (this->warmup_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->warmup_seconds(), output);
  }

  // int32 benchmark_seconds = 7;
  if (this->benchmark_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->benchmark_seconds(), output);
  }

  // int32 spawn_local_worker_count = 8;
  if (this->spawn_local_worker_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->spawn_local_worker_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.Scenario)
}

::google::protobuf::uint8* Scenario::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.Scenario)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.Scenario.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .grpc.testing.ClientConfig client_config = 2;
  if (this->has_client_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->client_config_, deterministic, target);
  }

  // int32 num_clients = 3;
  if (this->num_clients() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_clients(), target);
  }

  // .grpc.testing.ServerConfig server_config = 4;
  if (this->has_server_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->server_config_, deterministic, target);
  }

  // int32 num_servers = 5;
  if (this->num_servers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_servers(), target);
  }

  // int32 warmup_seconds = 6;
  if (this->warmup_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->warmup_seconds(), target);
  }

  // int32 benchmark_seconds = 7;
  if (this->benchmark_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->benchmark_seconds(), target);
  }

  // int32 spawn_local_worker_count = 8;
  if (this->spawn_local_worker_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->spawn_local_worker_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.Scenario)
  return target;
}

size_t Scenario::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.Scenario)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .grpc.testing.ClientConfig client_config = 2;
  if (this->has_client_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_config_);
  }

  // .grpc.testing.ServerConfig server_config = 4;
  if (this->has_server_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_config_);
  }

  // int32 num_clients = 3;
  if (this->num_clients() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_clients());
  }

  // int32 num_servers = 5;
  if (this->num_servers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_servers());
  }

  // int32 warmup_seconds = 6;
  if (this->warmup_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->warmup_seconds());
  }

  // int32 benchmark_seconds = 7;
  if (this->benchmark_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->benchmark_seconds());
  }

  // int32 spawn_local_worker_count = 8;
  if (this->spawn_local_worker_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spawn_local_worker_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scenario::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.Scenario)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.Scenario)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.Scenario)
    MergeFrom(*source);
  }
}

void Scenario::MergeFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.Scenario)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_client_config()) {
    mutable_client_config()->::grpc::testing::ClientConfig::MergeFrom(from.client_config());
  }
  if (from.has_server_config()) {
    mutable_server_config()->::grpc::testing::ServerConfig::MergeFrom(from.server_config());
  }
  if (from.num_clients() != 0) {
    set_num_clients(from.num_clients());
  }
  if (from.num_servers() != 0) {
    set_num_servers(from.num_servers());
  }
  if (from.warmup_seconds() != 0) {
    set_warmup_seconds(from.warmup_seconds());
  }
  if (from.benchmark_seconds() != 0) {
    set_benchmark_seconds(from.benchmark_seconds());
  }
  if (from.spawn_local_worker_count() != 0) {
    set_spawn_local_worker_count(from.spawn_local_worker_count());
  }
}

void Scenario::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario::CopyFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario::IsInitialized() const {
  return true;
}

void Scenario::Swap(Scenario* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario::InternalSwap(Scenario* other) {
  name_.Swap(&other->name_);
  std::swap(client_config_, other->client_config_);
  std::swap(server_config_, other->server_config_);
  std::swap(num_clients_, other->num_clients_);
  std::swap(num_servers_, other->num_servers_);
  std::swap(warmup_seconds_, other->warmup_seconds_);
  std::swap(benchmark_seconds_, other->benchmark_seconds_);
  std::swap(spawn_local_worker_count_, other->spawn_local_worker_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scenario::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scenario

// string name = 1;
void Scenario::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Scenario::name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenario.name)
  return name_.GetNoArena();
}
void Scenario::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.Scenario.name)
}
#if LANG_CXX11
void Scenario::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.Scenario.name)
}
#endif
void Scenario::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.Scenario.name)
}
void Scenario::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.Scenario.name)
}
::std::string* Scenario::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.Scenario.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scenario::release_name() {
  // @@protoc_insertion_point(field_release:grpc.testing.Scenario.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scenario::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.Scenario.name)
}

// .grpc.testing.ClientConfig client_config = 2;
bool Scenario::has_client_config() const {
  return this != internal_default_instance() && client_config_ != NULL;
}
void Scenario::clear_client_config() {
  if (GetArenaNoVirtual() == NULL && client_config_ != NULL) delete client_config_;
  client_config_ = NULL;
}
const ::grpc::testing::ClientConfig& Scenario::client_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenario.client_config)
  return client_config_ != NULL ? *client_config_
                         : *::grpc::testing::ClientConfig::internal_default_instance();
}
::grpc::testing::ClientConfig* Scenario::mutable_client_config() {
  
  if (client_config_ == NULL) {
    client_config_ = new ::grpc::testing::ClientConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.Scenario.client_config)
  return client_config_;
}
::grpc::testing::ClientConfig* Scenario::release_client_config() {
  // @@protoc_insertion_point(field_release:grpc.testing.Scenario.client_config)
  
  ::grpc::testing::ClientConfig* temp = client_config_;
  client_config_ = NULL;
  return temp;
}
void Scenario::set_allocated_client_config(::grpc::testing::ClientConfig* client_config) {
  delete client_config_;
  client_config_ = client_config;
  if (client_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.Scenario.client_config)
}

// int32 num_clients = 3;
void Scenario::clear_num_clients() {
  num_clients_ = 0;
}
::google::protobuf::int32 Scenario::num_clients() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenario.num_clients)
  return num_clients_;
}
void Scenario::set_num_clients(::google::protobuf::int32 value) {
  
  num_clients_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Scenario.num_clients)
}

// .grpc.testing.ServerConfig server_config = 4;
bool Scenario::has_server_config() const {
  return this != internal_default_instance() && server_config_ != NULL;
}
void Scenario::clear_server_config() {
  if (GetArenaNoVirtual() == NULL && server_config_ != NULL) delete server_config_;
  server_config_ = NULL;
}
const ::grpc::testing::ServerConfig& Scenario::server_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenario.server_config)
  return server_config_ != NULL ? *server_config_
                         : *::grpc::testing::ServerConfig::internal_default_instance();
}
::grpc::testing::ServerConfig* Scenario::mutable_server_config() {
  
  if (server_config_ == NULL) {
    server_config_ = new ::grpc::testing::ServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.Scenario.server_config)
  return server_config_;
}
::grpc::testing::ServerConfig* Scenario::release_server_config() {
  // @@protoc_insertion_point(field_release:grpc.testing.Scenario.server_config)
  
  ::grpc::testing::ServerConfig* temp = server_config_;
  server_config_ = NULL;
  return temp;
}
void Scenario::set_allocated_server_config(::grpc::testing::ServerConfig* server_config) {
  delete server_config_;
  server_config_ = server_config;
  if (server_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.Scenario.server_config)
}

// int32 num_servers = 5;
void Scenario::clear_num_servers() {
  num_servers_ = 0;
}
::google::protobuf::int32 Scenario::num_servers() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenario.num_servers)
  return num_servers_;
}
void Scenario::set_num_servers(::google::protobuf::int32 value) {
  
  num_servers_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Scenario.num_servers)
}

// int32 warmup_seconds = 6;
void Scenario::clear_warmup_seconds() {
  warmup_seconds_ = 0;
}
::google::protobuf::int32 Scenario::warmup_seconds() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenario.warmup_seconds)
  return warmup_seconds_;
}
void Scenario::set_warmup_seconds(::google::protobuf::int32 value) {
  
  warmup_seconds_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Scenario.warmup_seconds)
}

// int32 benchmark_seconds = 7;
void Scenario::clear_benchmark_seconds() {
  benchmark_seconds_ = 0;
}
::google::protobuf::int32 Scenario::benchmark_seconds() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenario.benchmark_seconds)
  return benchmark_seconds_;
}
void Scenario::set_benchmark_seconds(::google::protobuf::int32 value) {
  
  benchmark_seconds_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Scenario.benchmark_seconds)
}

// int32 spawn_local_worker_count = 8;
void Scenario::clear_spawn_local_worker_count() {
  spawn_local_worker_count_ = 0;
}
::google::protobuf::int32 Scenario::spawn_local_worker_count() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenario.spawn_local_worker_count)
  return spawn_local_worker_count_;
}
void Scenario::set_spawn_local_worker_count(::google::protobuf::int32 value) {
  
  spawn_local_worker_count_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Scenario.spawn_local_worker_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenarios::kScenariosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenarios::Scenarios()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.Scenarios)
}
Scenarios::Scenarios(const Scenarios& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scenarios_(from.scenarios_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.Scenarios)
}

void Scenarios::SharedCtor() {
  _cached_size_ = 0;
}

Scenarios::~Scenarios() {
  // @@protoc_insertion_point(destructor:grpc.testing.Scenarios)
  SharedDtor();
}

void Scenarios::SharedDtor() {
}

void Scenarios::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scenarios::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scenarios& Scenarios::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scenarios* Scenarios::New(::google::protobuf::Arena* arena) const {
  Scenarios* n = new Scenarios;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scenarios::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.Scenarios)
  scenarios_.Clear();
}

bool Scenarios::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.Scenarios)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .grpc.testing.Scenario scenarios = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenarios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.Scenarios)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.Scenarios)
  return false;
#undef DO_
}

void Scenarios::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.Scenarios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.testing.Scenario scenarios = 1;
  for (unsigned int i = 0, n = this->scenarios_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scenarios(i), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.Scenarios)
}

::google::protobuf::uint8* Scenarios::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.Scenarios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.testing.Scenario scenarios = 1;
  for (unsigned int i = 0, n = this->scenarios_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->scenarios(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.Scenarios)
  return target;
}

size_t Scenarios::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.Scenarios)
  size_t total_size = 0;

  // repeated .grpc.testing.Scenario scenarios = 1;
  {
    unsigned int count = this->scenarios_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenarios(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scenarios::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.Scenarios)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenarios* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenarios>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.Scenarios)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.Scenarios)
    MergeFrom(*source);
  }
}

void Scenarios::MergeFrom(const Scenarios& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.Scenarios)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scenarios_.MergeFrom(from.scenarios_);
}

void Scenarios::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.Scenarios)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenarios::CopyFrom(const Scenarios& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.Scenarios)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenarios::IsInitialized() const {
  return true;
}

void Scenarios::Swap(Scenarios* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenarios::InternalSwap(Scenarios* other) {
  scenarios_.InternalSwap(&other->scenarios_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scenarios::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scenarios

// repeated .grpc.testing.Scenario scenarios = 1;
int Scenarios::scenarios_size() const {
  return scenarios_.size();
}
void Scenarios::clear_scenarios() {
  scenarios_.Clear();
}
const ::grpc::testing::Scenario& Scenarios::scenarios(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.Scenarios.scenarios)
  return scenarios_.Get(index);
}
::grpc::testing::Scenario* Scenarios::mutable_scenarios(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.Scenarios.scenarios)
  return scenarios_.Mutable(index);
}
::grpc::testing::Scenario* Scenarios::add_scenarios() {
  // @@protoc_insertion_point(field_add:grpc.testing.Scenarios.scenarios)
  return scenarios_.Add();
}
::google::protobuf::RepeatedPtrField< ::grpc::testing::Scenario >*
Scenarios::mutable_scenarios() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.Scenarios.scenarios)
  return &scenarios_;
}
const ::google::protobuf::RepeatedPtrField< ::grpc::testing::Scenario >&
Scenarios::scenarios() const {
  // @@protoc_insertion_point(field_list:grpc.testing.Scenarios.scenarios)
  return scenarios_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioResultSummary::kQpsFieldNumber;
const int ScenarioResultSummary::kQpsPerServerCoreFieldNumber;
const int ScenarioResultSummary::kServerSystemTimeFieldNumber;
const int ScenarioResultSummary::kServerUserTimeFieldNumber;
const int ScenarioResultSummary::kClientSystemTimeFieldNumber;
const int ScenarioResultSummary::kClientUserTimeFieldNumber;
const int ScenarioResultSummary::kLatency50FieldNumber;
const int ScenarioResultSummary::kLatency90FieldNumber;
const int ScenarioResultSummary::kLatency95FieldNumber;
const int ScenarioResultSummary::kLatency99FieldNumber;
const int ScenarioResultSummary::kLatency999FieldNumber;
const int ScenarioResultSummary::kServerCpuUsageFieldNumber;
const int ScenarioResultSummary::kSuccessfulRequestsPerSecondFieldNumber;
const int ScenarioResultSummary::kFailedRequestsPerSecondFieldNumber;
const int ScenarioResultSummary::kClientPollsPerRequestFieldNumber;
const int ScenarioResultSummary::kServerPollsPerRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioResultSummary::ScenarioResultSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ScenarioResultSummary)
}
ScenarioResultSummary::ScenarioResultSummary(const ScenarioResultSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qps_, &from.qps_,
    reinterpret_cast<char*>(&server_polls_per_request_) -
    reinterpret_cast<char*>(&qps_) + sizeof(server_polls_per_request_));
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ScenarioResultSummary)
}

void ScenarioResultSummary::SharedCtor() {
  ::memset(&qps_, 0, reinterpret_cast<char*>(&server_polls_per_request_) -
    reinterpret_cast<char*>(&qps_) + sizeof(server_polls_per_request_));
  _cached_size_ = 0;
}

ScenarioResultSummary::~ScenarioResultSummary() {
  // @@protoc_insertion_point(destructor:grpc.testing.ScenarioResultSummary)
  SharedDtor();
}

void ScenarioResultSummary::SharedDtor() {
}

void ScenarioResultSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenarioResultSummary::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioResultSummary& ScenarioResultSummary::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenarioResultSummary* ScenarioResultSummary::New(::google::protobuf::Arena* arena) const {
  ScenarioResultSummary* n = new ScenarioResultSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenarioResultSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ScenarioResultSummary)
  ::memset(&qps_, 0, reinterpret_cast<char*>(&server_polls_per_request_) -
    reinterpret_cast<char*>(&qps_) + sizeof(server_polls_per_request_));
}

bool ScenarioResultSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ScenarioResultSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double qps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double qps_per_server_core = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qps_per_server_core_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double server_system_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &server_system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double server_user_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &server_user_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double client_system_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &client_system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double client_user_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &client_user_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latency_50 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latency_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latency_90 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latency_90_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latency_95 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latency_95_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latency_99 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latency_99_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latency_999 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latency_999_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double server_cpu_usage = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &server_cpu_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double successful_requests_per_second = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &successful_requests_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double failed_requests_per_second = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &failed_requests_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double client_polls_per_request = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &client_polls_per_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double server_polls_per_request = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &server_polls_per_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ScenarioResultSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ScenarioResultSummary)
  return false;
#undef DO_
}

void ScenarioResultSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ScenarioResultSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double qps = 1;
  if (this->qps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->qps(), output);
  }

  // double qps_per_server_core = 2;
  if (this->qps_per_server_core() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qps_per_server_core(), output);
  }

  // double server_system_time = 3;
  if (this->server_system_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->server_system_time(), output);
  }

  // double server_user_time = 4;
  if (this->server_user_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->server_user_time(), output);
  }

  // double client_system_time = 5;
  if (this->client_system_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->client_system_time(), output);
  }

  // double client_user_time = 6;
  if (this->client_user_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->client_user_time(), output);
  }

  // double latency_50 = 7;
  if (this->latency_50() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->latency_50(), output);
  }

  // double latency_90 = 8;
  if (this->latency_90() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->latency_90(), output);
  }

  // double latency_95 = 9;
  if (this->latency_95() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->latency_95(), output);
  }

  // double latency_99 = 10;
  if (this->latency_99() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->latency_99(), output);
  }

  // double latency_999 = 11;
  if (this->latency_999() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->latency_999(), output);
  }

  // double server_cpu_usage = 12;
  if (this->server_cpu_usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->server_cpu_usage(), output);
  }

  // double successful_requests_per_second = 13;
  if (this->successful_requests_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->successful_requests_per_second(), output);
  }

  // double failed_requests_per_second = 14;
  if (this->failed_requests_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->failed_requests_per_second(), output);
  }

  // double client_polls_per_request = 15;
  if (this->client_polls_per_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->client_polls_per_request(), output);
  }

  // double server_polls_per_request = 16;
  if (this->server_polls_per_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->server_polls_per_request(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ScenarioResultSummary)
}

::google::protobuf::uint8* ScenarioResultSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ScenarioResultSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double qps = 1;
  if (this->qps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->qps(), target);
  }

  // double qps_per_server_core = 2;
  if (this->qps_per_server_core() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->qps_per_server_core(), target);
  }

  // double server_system_time = 3;
  if (this->server_system_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->server_system_time(), target);
  }

  // double server_user_time = 4;
  if (this->server_user_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->server_user_time(), target);
  }

  // double client_system_time = 5;
  if (this->client_system_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->client_system_time(), target);
  }

  // double client_user_time = 6;
  if (this->client_user_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->client_user_time(), target);
  }

  // double latency_50 = 7;
  if (this->latency_50() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->latency_50(), target);
  }

  // double latency_90 = 8;
  if (this->latency_90() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->latency_90(), target);
  }

  // double latency_95 = 9;
  if (this->latency_95() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->latency_95(), target);
  }

  // double latency_99 = 10;
  if (this->latency_99() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->latency_99(), target);
  }

  // double latency_999 = 11;
  if (this->latency_999() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->latency_999(), target);
  }

  // double server_cpu_usage = 12;
  if (this->server_cpu_usage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->server_cpu_usage(), target);
  }

  // double successful_requests_per_second = 13;
  if (this->successful_requests_per_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->successful_requests_per_second(), target);
  }

  // double failed_requests_per_second = 14;
  if (this->failed_requests_per_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->failed_requests_per_second(), target);
  }

  // double client_polls_per_request = 15;
  if (this->client_polls_per_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->client_polls_per_request(), target);
  }

  // double server_polls_per_request = 16;
  if (this->server_polls_per_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->server_polls_per_request(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ScenarioResultSummary)
  return target;
}

size_t ScenarioResultSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ScenarioResultSummary)
  size_t total_size = 0;

  // double qps = 1;
  if (this->qps() != 0) {
    total_size += 1 + 8;
  }

  // double qps_per_server_core = 2;
  if (this->qps_per_server_core() != 0) {
    total_size += 1 + 8;
  }

  // double server_system_time = 3;
  if (this->server_system_time() != 0) {
    total_size += 1 + 8;
  }

  // double server_user_time = 4;
  if (this->server_user_time() != 0) {
    total_size += 1 + 8;
  }

  // double client_system_time = 5;
  if (this->client_system_time() != 0) {
    total_size += 1 + 8;
  }

  // double client_user_time = 6;
  if (this->client_user_time() != 0) {
    total_size += 1 + 8;
  }

  // double latency_50 = 7;
  if (this->latency_50() != 0) {
    total_size += 1 + 8;
  }

  // double latency_90 = 8;
  if (this->latency_90() != 0) {
    total_size += 1 + 8;
  }

  // double latency_95 = 9;
  if (this->latency_95() != 0) {
    total_size += 1 + 8;
  }

  // double latency_99 = 10;
  if (this->latency_99() != 0) {
    total_size += 1 + 8;
  }

  // double latency_999 = 11;
  if (this->latency_999() != 0) {
    total_size += 1 + 8;
  }

  // double server_cpu_usage = 12;
  if (this->server_cpu_usage() != 0) {
    total_size += 1 + 8;
  }

  // double successful_requests_per_second = 13;
  if (this->successful_requests_per_second() != 0) {
    total_size += 1 + 8;
  }

  // double failed_requests_per_second = 14;
  if (this->failed_requests_per_second() != 0) {
    total_size += 1 + 8;
  }

  // double client_polls_per_request = 15;
  if (this->client_polls_per_request() != 0) {
    total_size += 1 + 8;
  }

  // double server_polls_per_request = 16;
  if (this->server_polls_per_request() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenarioResultSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ScenarioResultSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioResultSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioResultSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ScenarioResultSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ScenarioResultSummary)
    MergeFrom(*source);
  }
}

void ScenarioResultSummary::MergeFrom(const ScenarioResultSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ScenarioResultSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qps() != 0) {
    set_qps(from.qps());
  }
  if (from.qps_per_server_core() != 0) {
    set_qps_per_server_core(from.qps_per_server_core());
  }
  if (from.server_system_time() != 0) {
    set_server_system_time(from.server_system_time());
  }
  if (from.server_user_time() != 0) {
    set_server_user_time(from.server_user_time());
  }
  if (from.client_system_time() != 0) {
    set_client_system_time(from.client_system_time());
  }
  if (from.client_user_time() != 0) {
    set_client_user_time(from.client_user_time());
  }
  if (from.latency_50() != 0) {
    set_latency_50(from.latency_50());
  }
  if (from.latency_90() != 0) {
    set_latency_90(from.latency_90());
  }
  if (from.latency_95() != 0) {
    set_latency_95(from.latency_95());
  }
  if (from.latency_99() != 0) {
    set_latency_99(from.latency_99());
  }
  if (from.latency_999() != 0) {
    set_latency_999(from.latency_999());
  }
  if (from.server_cpu_usage() != 0) {
    set_server_cpu_usage(from.server_cpu_usage());
  }
  if (from.successful_requests_per_second() != 0) {
    set_successful_requests_per_second(from.successful_requests_per_second());
  }
  if (from.failed_requests_per_second() != 0) {
    set_failed_requests_per_second(from.failed_requests_per_second());
  }
  if (from.client_polls_per_request() != 0) {
    set_client_polls_per_request(from.client_polls_per_request());
  }
  if (from.server_polls_per_request() != 0) {
    set_server_polls_per_request(from.server_polls_per_request());
  }
}

void ScenarioResultSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ScenarioResultSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioResultSummary::CopyFrom(const ScenarioResultSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ScenarioResultSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioResultSummary::IsInitialized() const {
  return true;
}

void ScenarioResultSummary::Swap(ScenarioResultSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioResultSummary::InternalSwap(ScenarioResultSummary* other) {
  std::swap(qps_, other->qps_);
  std::swap(qps_per_server_core_, other->qps_per_server_core_);
  std::swap(server_system_time_, other->server_system_time_);
  std::swap(server_user_time_, other->server_user_time_);
  std::swap(client_system_time_, other->client_system_time_);
  std::swap(client_user_time_, other->client_user_time_);
  std::swap(latency_50_, other->latency_50_);
  std::swap(latency_90_, other->latency_90_);
  std::swap(latency_95_, other->latency_95_);
  std::swap(latency_99_, other->latency_99_);
  std::swap(latency_999_, other->latency_999_);
  std::swap(server_cpu_usage_, other->server_cpu_usage_);
  std::swap(successful_requests_per_second_, other->successful_requests_per_second_);
  std::swap(failed_requests_per_second_, other->failed_requests_per_second_);
  std::swap(client_polls_per_request_, other->client_polls_per_request_);
  std::swap(server_polls_per_request_, other->server_polls_per_request_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenarioResultSummary::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenarioResultSummary

// double qps = 1;
void ScenarioResultSummary::clear_qps() {
  qps_ = 0;
}
double ScenarioResultSummary::qps() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.qps)
  return qps_;
}
void ScenarioResultSummary::set_qps(double value) {
  
  qps_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.qps)
}

// double qps_per_server_core = 2;
void ScenarioResultSummary::clear_qps_per_server_core() {
  qps_per_server_core_ = 0;
}
double ScenarioResultSummary::qps_per_server_core() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.qps_per_server_core)
  return qps_per_server_core_;
}
void ScenarioResultSummary::set_qps_per_server_core(double value) {
  
  qps_per_server_core_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.qps_per_server_core)
}

// double server_system_time = 3;
void ScenarioResultSummary::clear_server_system_time() {
  server_system_time_ = 0;
}
double ScenarioResultSummary::server_system_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.server_system_time)
  return server_system_time_;
}
void ScenarioResultSummary::set_server_system_time(double value) {
  
  server_system_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.server_system_time)
}

// double server_user_time = 4;
void ScenarioResultSummary::clear_server_user_time() {
  server_user_time_ = 0;
}
double ScenarioResultSummary::server_user_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.server_user_time)
  return server_user_time_;
}
void ScenarioResultSummary::set_server_user_time(double value) {
  
  server_user_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.server_user_time)
}

// double client_system_time = 5;
void ScenarioResultSummary::clear_client_system_time() {
  client_system_time_ = 0;
}
double ScenarioResultSummary::client_system_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.client_system_time)
  return client_system_time_;
}
void ScenarioResultSummary::set_client_system_time(double value) {
  
  client_system_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.client_system_time)
}

// double client_user_time = 6;
void ScenarioResultSummary::clear_client_user_time() {
  client_user_time_ = 0;
}
double ScenarioResultSummary::client_user_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.client_user_time)
  return client_user_time_;
}
void ScenarioResultSummary::set_client_user_time(double value) {
  
  client_user_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.client_user_time)
}

// double latency_50 = 7;
void ScenarioResultSummary::clear_latency_50() {
  latency_50_ = 0;
}
double ScenarioResultSummary::latency_50() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.latency_50)
  return latency_50_;
}
void ScenarioResultSummary::set_latency_50(double value) {
  
  latency_50_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.latency_50)
}

// double latency_90 = 8;
void ScenarioResultSummary::clear_latency_90() {
  latency_90_ = 0;
}
double ScenarioResultSummary::latency_90() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.latency_90)
  return latency_90_;
}
void ScenarioResultSummary::set_latency_90(double value) {
  
  latency_90_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.latency_90)
}

// double latency_95 = 9;
void ScenarioResultSummary::clear_latency_95() {
  latency_95_ = 0;
}
double ScenarioResultSummary::latency_95() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.latency_95)
  return latency_95_;
}
void ScenarioResultSummary::set_latency_95(double value) {
  
  latency_95_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.latency_95)
}

// double latency_99 = 10;
void ScenarioResultSummary::clear_latency_99() {
  latency_99_ = 0;
}
double ScenarioResultSummary::latency_99() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.latency_99)
  return latency_99_;
}
void ScenarioResultSummary::set_latency_99(double value) {
  
  latency_99_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.latency_99)
}

// double latency_999 = 11;
void ScenarioResultSummary::clear_latency_999() {
  latency_999_ = 0;
}
double ScenarioResultSummary::latency_999() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.latency_999)
  return latency_999_;
}
void ScenarioResultSummary::set_latency_999(double value) {
  
  latency_999_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.latency_999)
}

// double server_cpu_usage = 12;
void ScenarioResultSummary::clear_server_cpu_usage() {
  server_cpu_usage_ = 0;
}
double ScenarioResultSummary::server_cpu_usage() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.server_cpu_usage)
  return server_cpu_usage_;
}
void ScenarioResultSummary::set_server_cpu_usage(double value) {
  
  server_cpu_usage_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.server_cpu_usage)
}

// double successful_requests_per_second = 13;
void ScenarioResultSummary::clear_successful_requests_per_second() {
  successful_requests_per_second_ = 0;
}
double ScenarioResultSummary::successful_requests_per_second() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.successful_requests_per_second)
  return successful_requests_per_second_;
}
void ScenarioResultSummary::set_successful_requests_per_second(double value) {
  
  successful_requests_per_second_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.successful_requests_per_second)
}

// double failed_requests_per_second = 14;
void ScenarioResultSummary::clear_failed_requests_per_second() {
  failed_requests_per_second_ = 0;
}
double ScenarioResultSummary::failed_requests_per_second() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.failed_requests_per_second)
  return failed_requests_per_second_;
}
void ScenarioResultSummary::set_failed_requests_per_second(double value) {
  
  failed_requests_per_second_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.failed_requests_per_second)
}

// double client_polls_per_request = 15;
void ScenarioResultSummary::clear_client_polls_per_request() {
  client_polls_per_request_ = 0;
}
double ScenarioResultSummary::client_polls_per_request() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.client_polls_per_request)
  return client_polls_per_request_;
}
void ScenarioResultSummary::set_client_polls_per_request(double value) {
  
  client_polls_per_request_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.client_polls_per_request)
}

// double server_polls_per_request = 16;
void ScenarioResultSummary::clear_server_polls_per_request() {
  server_polls_per_request_ = 0;
}
double ScenarioResultSummary::server_polls_per_request() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResultSummary.server_polls_per_request)
  return server_polls_per_request_;
}
void ScenarioResultSummary::set_server_polls_per_request(double value) {
  
  server_polls_per_request_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResultSummary.server_polls_per_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioResult::kScenarioFieldNumber;
const int ScenarioResult::kLatenciesFieldNumber;
const int ScenarioResult::kClientStatsFieldNumber;
const int ScenarioResult::kServerStatsFieldNumber;
const int ScenarioResult::kServerCoresFieldNumber;
const int ScenarioResult::kSummaryFieldNumber;
const int ScenarioResult::kClientSuccessFieldNumber;
const int ScenarioResult::kServerSuccessFieldNumber;
const int ScenarioResult::kRequestResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioResult::ScenarioResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ScenarioResult)
}
ScenarioResult::ScenarioResult(const ScenarioResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      client_stats_(from.client_stats_),
      server_stats_(from.server_stats_),
      server_cores_(from.server_cores_),
      client_success_(from.client_success_),
      server_success_(from.server_success_),
      request_results_(from.request_results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scenario()) {
    scenario_ = new ::grpc::testing::Scenario(*from.scenario_);
  } else {
    scenario_ = NULL;
  }
  if (from.has_latencies()) {
    latencies_ = new ::grpc::testing::HistogramData(*from.latencies_);
  } else {
    latencies_ = NULL;
  }
  if (from.has_summary()) {
    summary_ = new ::grpc::testing::ScenarioResultSummary(*from.summary_);
  } else {
    summary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ScenarioResult)
}

void ScenarioResult::SharedCtor() {
  ::memset(&scenario_, 0, reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&scenario_) + sizeof(summary_));
  _cached_size_ = 0;
}

ScenarioResult::~ScenarioResult() {
  // @@protoc_insertion_point(destructor:grpc.testing.ScenarioResult)
  SharedDtor();
}

void ScenarioResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete scenario_;
  }
  if (this != internal_default_instance()) {
    delete latencies_;
  }
  if (this != internal_default_instance()) {
    delete summary_;
  }
}

void ScenarioResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenarioResult::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioResult& ScenarioResult::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenarioResult* ScenarioResult::New(::google::protobuf::Arena* arena) const {
  ScenarioResult* n = new ScenarioResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenarioResult::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ScenarioResult)
  client_stats_.Clear();
  server_stats_.Clear();
  server_cores_.Clear();
  client_success_.Clear();
  server_success_.Clear();
  request_results_.Clear();
  if (GetArenaNoVirtual() == NULL && scenario_ != NULL) {
    delete scenario_;
  }
  scenario_ = NULL;
  if (GetArenaNoVirtual() == NULL && latencies_ != NULL) {
    delete latencies_;
  }
  latencies_ = NULL;
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) {
    delete summary_;
  }
  summary_ = NULL;
}

bool ScenarioResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ScenarioResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.Scenario scenario = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenario()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.HistogramData latencies = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latencies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.testing.ClientStats client_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.testing.ServerStats server_stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 server_cores = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_server_cores())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_server_cores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.ScenarioResultSummary summary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool client_success = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_client_success())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 58u, input, this->mutable_client_success())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool server_success = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_server_success())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 66u, input, this->mutable_server_success())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.testing.RequestResultCount request_results = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ScenarioResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ScenarioResult)
  return false;
#undef DO_
}

void ScenarioResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ScenarioResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.Scenario scenario = 1;
  if (this->has_scenario()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->scenario_, output);
  }

  // .grpc.testing.HistogramData latencies = 2;
  if (this->has_latencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->latencies_, output);
  }

  // repeated .grpc.testing.ClientStats client_stats = 3;
  for (unsigned int i = 0, n = this->client_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->client_stats(i), output);
  }

  // repeated .grpc.testing.ServerStats server_stats = 4;
  for (unsigned int i = 0, n = this->server_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->server_stats(i), output);
  }

  // repeated int32 server_cores = 5;
  if (this->server_cores_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_server_cores_cached_byte_size_);
  }
  for (int i = 0, n = this->server_cores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->server_cores(i), output);
  }

  // .grpc.testing.ScenarioResultSummary summary = 6;
  if (this->has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->summary_, output);
  }

  // repeated bool client_success = 7;
  if (this->client_success_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_client_success_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->client_success().data(), this->client_success_size(), output);
  }

  // repeated bool server_success = 8;
  if (this->server_success_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_server_success_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->server_success().data(), this->server_success_size(), output);
  }

  // repeated .grpc.testing.RequestResultCount request_results = 9;
  for (unsigned int i = 0, n = this->request_results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->request_results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ScenarioResult)
}

::google::protobuf::uint8* ScenarioResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ScenarioResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.Scenario scenario = 1;
  if (this->has_scenario()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->scenario_, deterministic, target);
  }

  // .grpc.testing.HistogramData latencies = 2;
  if (this->has_latencies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->latencies_, deterministic, target);
  }

  // repeated .grpc.testing.ClientStats client_stats = 3;
  for (unsigned int i = 0, n = this->client_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->client_stats(i), deterministic, target);
  }

  // repeated .grpc.testing.ServerStats server_stats = 4;
  for (unsigned int i = 0, n = this->server_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->server_stats(i), deterministic, target);
  }

  // repeated int32 server_cores = 5;
  if (this->server_cores_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _server_cores_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->server_cores_, target);
  }

  // .grpc.testing.ScenarioResultSummary summary = 6;
  if (this->has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->summary_, deterministic, target);
  }

  // repeated bool client_success = 7;
  if (this->client_success_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _client_success_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->client_success_, target);
  }

  // repeated bool server_success = 8;
  if (this->server_success_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _server_success_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->server_success_, target);
  }

  // repeated .grpc.testing.RequestResultCount request_results = 9;
  for (unsigned int i = 0, n = this->request_results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->request_results(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ScenarioResult)
  return target;
}

size_t ScenarioResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ScenarioResult)
  size_t total_size = 0;

  // repeated .grpc.testing.ClientStats client_stats = 3;
  {
    unsigned int count = this->client_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_stats(i));
    }
  }

  // repeated .grpc.testing.ServerStats server_stats = 4;
  {
    unsigned int count = this->server_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_stats(i));
    }
  }

  // repeated int32 server_cores = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->server_cores_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _server_cores_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool client_success = 7;
  {
    unsigned int count = this->client_success_size();
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _client_success_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool server_success = 8;
  {
    unsigned int count = this->server_success_size();
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _server_success_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .grpc.testing.RequestResultCount request_results = 9;
  {
    unsigned int count = this->request_results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_results(i));
    }
  }

  // .grpc.testing.Scenario scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scenario_);
  }

  // .grpc.testing.HistogramData latencies = 2;
  if (this->has_latencies()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->latencies_);
  }

  // .grpc.testing.ScenarioResultSummary summary = 6;
  if (this->has_summary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->summary_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenarioResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ScenarioResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ScenarioResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ScenarioResult)
    MergeFrom(*source);
  }
}

void ScenarioResult::MergeFrom(const ScenarioResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ScenarioResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_stats_.MergeFrom(from.client_stats_);
  server_stats_.MergeFrom(from.server_stats_);
  server_cores_.MergeFrom(from.server_cores_);
  client_success_.MergeFrom(from.client_success_);
  server_success_.MergeFrom(from.server_success_);
  request_results_.MergeFrom(from.request_results_);
  if (from.has_scenario()) {
    mutable_scenario()->::grpc::testing::Scenario::MergeFrom(from.scenario());
  }
  if (from.has_latencies()) {
    mutable_latencies()->::grpc::testing::HistogramData::MergeFrom(from.latencies());
  }
  if (from.has_summary()) {
    mutable_summary()->::grpc::testing::ScenarioResultSummary::MergeFrom(from.summary());
  }
}

void ScenarioResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ScenarioResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioResult::CopyFrom(const ScenarioResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ScenarioResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioResult::IsInitialized() const {
  return true;
}

void ScenarioResult::Swap(ScenarioResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioResult::InternalSwap(ScenarioResult* other) {
  client_stats_.InternalSwap(&other->client_stats_);
  server_stats_.InternalSwap(&other->server_stats_);
  server_cores_.InternalSwap(&other->server_cores_);
  client_success_.InternalSwap(&other->client_success_);
  server_success_.InternalSwap(&other->server_success_);
  request_results_.InternalSwap(&other->request_results_);
  std::swap(scenario_, other->scenario_);
  std::swap(latencies_, other->latencies_);
  std::swap(summary_, other->summary_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenarioResult::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenarioResult

// .grpc.testing.Scenario scenario = 1;
bool ScenarioResult::has_scenario() const {
  return this != internal_default_instance() && scenario_ != NULL;
}
void ScenarioResult::clear_scenario() {
  if (GetArenaNoVirtual() == NULL && scenario_ != NULL) delete scenario_;
  scenario_ = NULL;
}
const ::grpc::testing::Scenario& ScenarioResult::scenario() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.scenario)
  return scenario_ != NULL ? *scenario_
                         : *::grpc::testing::Scenario::internal_default_instance();
}
::grpc::testing::Scenario* ScenarioResult::mutable_scenario() {
  
  if (scenario_ == NULL) {
    scenario_ = new ::grpc::testing::Scenario;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ScenarioResult.scenario)
  return scenario_;
}
::grpc::testing::Scenario* ScenarioResult::release_scenario() {
  // @@protoc_insertion_point(field_release:grpc.testing.ScenarioResult.scenario)
  
  ::grpc::testing::Scenario* temp = scenario_;
  scenario_ = NULL;
  return temp;
}
void ScenarioResult::set_allocated_scenario(::grpc::testing::Scenario* scenario) {
  delete scenario_;
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ScenarioResult.scenario)
}

// .grpc.testing.HistogramData latencies = 2;
bool ScenarioResult::has_latencies() const {
  return this != internal_default_instance() && latencies_ != NULL;
}
void ScenarioResult::clear_latencies() {
  if (GetArenaNoVirtual() == NULL && latencies_ != NULL) delete latencies_;
  latencies_ = NULL;
}
const ::grpc::testing::HistogramData& ScenarioResult::latencies() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.latencies)
  return latencies_ != NULL ? *latencies_
                         : *::grpc::testing::HistogramData::internal_default_instance();
}
::grpc::testing::HistogramData* ScenarioResult::mutable_latencies() {
  
  if (latencies_ == NULL) {
    latencies_ = new ::grpc::testing::HistogramData;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ScenarioResult.latencies)
  return latencies_;
}
::grpc::testing::HistogramData* ScenarioResult::release_latencies() {
  // @@protoc_insertion_point(field_release:grpc.testing.ScenarioResult.latencies)
  
  ::grpc::testing::HistogramData* temp = latencies_;
  latencies_ = NULL;
  return temp;
}
void ScenarioResult::set_allocated_latencies(::grpc::testing::HistogramData* latencies) {
  delete latencies_;
  latencies_ = latencies;
  if (latencies) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ScenarioResult.latencies)
}

// repeated .grpc.testing.ClientStats client_stats = 3;
int ScenarioResult::client_stats_size() const {
  return client_stats_.size();
}
void ScenarioResult::clear_client_stats() {
  client_stats_.Clear();
}
const ::grpc::testing::ClientStats& ScenarioResult::client_stats(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.client_stats)
  return client_stats_.Get(index);
}
::grpc::testing::ClientStats* ScenarioResult::mutable_client_stats(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.ScenarioResult.client_stats)
  return client_stats_.Mutable(index);
}
::grpc::testing::ClientStats* ScenarioResult::add_client_stats() {
  // @@protoc_insertion_point(field_add:grpc.testing.ScenarioResult.client_stats)
  return client_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::grpc::testing::ClientStats >*
ScenarioResult::mutable_client_stats() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ScenarioResult.client_stats)
  return &client_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::grpc::testing::ClientStats >&
ScenarioResult::client_stats() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ScenarioResult.client_stats)
  return client_stats_;
}

// repeated .grpc.testing.ServerStats server_stats = 4;
int ScenarioResult::server_stats_size() const {
  return server_stats_.size();
}
void ScenarioResult::clear_server_stats() {
  server_stats_.Clear();
}
const ::grpc::testing::ServerStats& ScenarioResult::server_stats(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.server_stats)
  return server_stats_.Get(index);
}
::grpc::testing::ServerStats* ScenarioResult::mutable_server_stats(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.ScenarioResult.server_stats)
  return server_stats_.Mutable(index);
}
::grpc::testing::ServerStats* ScenarioResult::add_server_stats() {
  // @@protoc_insertion_point(field_add:grpc.testing.ScenarioResult.server_stats)
  return server_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::grpc::testing::ServerStats >*
ScenarioResult::mutable_server_stats() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ScenarioResult.server_stats)
  return &server_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::grpc::testing::ServerStats >&
ScenarioResult::server_stats() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ScenarioResult.server_stats)
  return server_stats_;
}

// repeated int32 server_cores = 5;
int ScenarioResult::server_cores_size() const {
  return server_cores_.size();
}
void ScenarioResult::clear_server_cores() {
  server_cores_.Clear();
}
::google::protobuf::int32 ScenarioResult::server_cores(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.server_cores)
  return server_cores_.Get(index);
}
void ScenarioResult::set_server_cores(int index, ::google::protobuf::int32 value) {
  server_cores_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResult.server_cores)
}
void ScenarioResult::add_server_cores(::google::protobuf::int32 value) {
  server_cores_.Add(value);
  // @@protoc_insertion_point(field_add:grpc.testing.ScenarioResult.server_cores)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ScenarioResult::server_cores() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ScenarioResult.server_cores)
  return server_cores_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ScenarioResult::mutable_server_cores() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ScenarioResult.server_cores)
  return &server_cores_;
}

// .grpc.testing.ScenarioResultSummary summary = 6;
bool ScenarioResult::has_summary() const {
  return this != internal_default_instance() && summary_ != NULL;
}
void ScenarioResult::clear_summary() {
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) delete summary_;
  summary_ = NULL;
}
const ::grpc::testing::ScenarioResultSummary& ScenarioResult::summary() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.summary)
  return summary_ != NULL ? *summary_
                         : *::grpc::testing::ScenarioResultSummary::internal_default_instance();
}
::grpc::testing::ScenarioResultSummary* ScenarioResult::mutable_summary() {
  
  if (summary_ == NULL) {
    summary_ = new ::grpc::testing::ScenarioResultSummary;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ScenarioResult.summary)
  return summary_;
}
::grpc::testing::ScenarioResultSummary* ScenarioResult::release_summary() {
  // @@protoc_insertion_point(field_release:grpc.testing.ScenarioResult.summary)
  
  ::grpc::testing::ScenarioResultSummary* temp = summary_;
  summary_ = NULL;
  return temp;
}
void ScenarioResult::set_allocated_summary(::grpc::testing::ScenarioResultSummary* summary) {
  delete summary_;
  summary_ = summary;
  if (summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ScenarioResult.summary)
}

// repeated bool client_success = 7;
int ScenarioResult::client_success_size() const {
  return client_success_.size();
}
void ScenarioResult::clear_client_success() {
  client_success_.Clear();
}
bool ScenarioResult::client_success(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.client_success)
  return client_success_.Get(index);
}
void ScenarioResult::set_client_success(int index, bool value) {
  client_success_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResult.client_success)
}
void ScenarioResult::add_client_success(bool value) {
  client_success_.Add(value);
  // @@protoc_insertion_point(field_add:grpc.testing.ScenarioResult.client_success)
}
const ::google::protobuf::RepeatedField< bool >&
ScenarioResult::client_success() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ScenarioResult.client_success)
  return client_success_;
}
::google::protobuf::RepeatedField< bool >*
ScenarioResult::mutable_client_success() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ScenarioResult.client_success)
  return &client_success_;
}

// repeated bool server_success = 8;
int ScenarioResult::server_success_size() const {
  return server_success_.size();
}
void ScenarioResult::clear_server_success() {
  server_success_.Clear();
}
bool ScenarioResult::server_success(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.server_success)
  return server_success_.Get(index);
}
void ScenarioResult::set_server_success(int index, bool value) {
  server_success_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.testing.ScenarioResult.server_success)
}
void ScenarioResult::add_server_success(bool value) {
  server_success_.Add(value);
  // @@protoc_insertion_point(field_add:grpc.testing.ScenarioResult.server_success)
}
const ::google::protobuf::RepeatedField< bool >&
ScenarioResult::server_success() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ScenarioResult.server_success)
  return server_success_;
}
::google::protobuf::RepeatedField< bool >*
ScenarioResult::mutable_server_success() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ScenarioResult.server_success)
  return &server_success_;
}

// repeated .grpc.testing.RequestResultCount request_results = 9;
int ScenarioResult::request_results_size() const {
  return request_results_.size();
}
void ScenarioResult::clear_request_results() {
  request_results_.Clear();
}
const ::grpc::testing::RequestResultCount& ScenarioResult::request_results(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ScenarioResult.request_results)
  return request_results_.Get(index);
}
::grpc::testing::RequestResultCount* ScenarioResult::mutable_request_results(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.ScenarioResult.request_results)
  return request_results_.Mutable(index);
}
::grpc::testing::RequestResultCount* ScenarioResult::add_request_results() {
  // @@protoc_insertion_point(field_add:grpc.testing.ScenarioResult.request_results)
  return request_results_.Add();
}
::google::protobuf::RepeatedPtrField< ::grpc::testing::RequestResultCount >*
ScenarioResult::mutable_request_results() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ScenarioResult.request_results)
  return &request_results_;
}
const ::google::protobuf::RepeatedPtrField< ::grpc::testing::RequestResultCount >&
ScenarioResult::request_results() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ScenarioResult.request_results)
  return request_results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace grpc

// @@protoc_insertion_point(global_scope)
