// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: src/proto/grpc/testing/duplicate/echo_duplicate.proto
// Original file comments:
// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// This is a partial copy of echo.proto with a different package name.
//
#ifndef GRPC_src_2fproto_2fgrpc_2ftesting_2fduplicate_2fecho_5fduplicate_2eproto__INCLUDED
#define GRPC_src_2fproto_2fgrpc_2ftesting_2fduplicate_2fecho_5fduplicate_2eproto__INCLUDED

#include "src/proto/grpc/testing/duplicate/echo_duplicate.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc {
namespace testing {
namespace duplicate {

class EchoTestService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc.testing.duplicate.EchoTestService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Echo(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::testing::EchoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::testing::EchoResponse>> AsyncEcho(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::testing::EchoResponse>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::grpc::testing::EchoResponse>> ResponseStream(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::grpc::testing::EchoResponse>>(ResponseStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc::testing::EchoResponse>> AsyncResponseStream(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc::testing::EchoResponse>>(AsyncResponseStreamRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc::testing::EchoResponse>* AsyncEchoRaw(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::grpc::testing::EchoResponse>* ResponseStreamRaw(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpc::testing::EchoResponse>* AsyncResponseStreamRaw(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Echo(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::testing::EchoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::testing::EchoResponse>> AsyncEcho(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::testing::EchoResponse>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::grpc::testing::EchoResponse>> ResponseStream(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::grpc::testing::EchoResponse>>(ResponseStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc::testing::EchoResponse>> AsyncResponseStream(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc::testing::EchoResponse>>(AsyncResponseStreamRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::grpc::testing::EchoResponse>* AsyncEchoRaw(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::grpc::testing::EchoResponse>* ResponseStreamRaw(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request) override;
    ::grpc::ClientAsyncReader< ::grpc::testing::EchoResponse>* AsyncResponseStreamRaw(::grpc::ClientContext* context, const ::grpc::testing::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_Echo_;
    const ::grpc::RpcMethod rpcmethod_ResponseStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Echo(::grpc::ServerContext* context, const ::grpc::testing::EchoRequest* request, ::grpc::testing::EchoResponse* response);
    virtual ::grpc::Status ResponseStream(::grpc::ServerContext* context, const ::grpc::testing::EchoRequest* request, ::grpc::ServerWriter< ::grpc::testing::EchoResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::grpc::testing::EchoRequest* request, ::grpc::testing::EchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::grpc::testing::EchoRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc::testing::EchoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResponseStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* context, const ::grpc::testing::EchoRequest* request, ::grpc::ServerWriter< ::grpc::testing::EchoResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResponseStream(::grpc::ServerContext* context, ::grpc::testing::EchoRequest* request, ::grpc::ServerAsyncWriter< ::grpc::testing::EchoResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Echo<WithAsyncMethod_ResponseStream<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::grpc::testing::EchoRequest* request, ::grpc::testing::EchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResponseStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* context, const ::grpc::testing::EchoRequest* request, ::grpc::ServerWriter< ::grpc::testing::EchoResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::grpc::testing::EchoRequest, ::grpc::testing::EchoResponse>(std::bind(&WithStreamedUnaryMethod_Echo<BaseClass>::StreamedEcho, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::grpc::testing::EchoRequest* request, ::grpc::testing::EchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc::testing::EchoRequest,::grpc::testing::EchoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Echo<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ResponseStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::SplitServerStreamingHandler< ::grpc::testing::EchoRequest, ::grpc::testing::EchoResponse>(std::bind(&WithSplitStreamingMethod_ResponseStream<BaseClass>::StreamedResponseStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* context, const ::grpc::testing::EchoRequest* request, ::grpc::ServerWriter< ::grpc::testing::EchoResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedResponseStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::grpc::testing::EchoRequest,::grpc::testing::EchoResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ResponseStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Echo<WithSplitStreamingMethod_ResponseStream<Service > > StreamedService;
};

}  // namespace duplicate
}  // namespace testing
}  // namespace grpc


#endif  // GRPC_src_2fproto_2fgrpc_2ftesting_2fduplicate_2fecho_5fduplicate_2eproto__INCLUDED
