// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: src/proto/grpc/testing/services.proto

#include "src/proto/grpc/testing/services.pb.h"
#include "src/proto/grpc/testing/services.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace grpc {
namespace testing {

static const char* BenchmarkService_method_names[] = {
  "/grpc.testing.BenchmarkService/UnaryCall",
  "/grpc.testing.BenchmarkService/StreamingCall",
  "/grpc.testing.BenchmarkService/StreamingFromClient",
  "/grpc.testing.BenchmarkService/StreamingFromServer",
  "/grpc.testing.BenchmarkService/StreamingBothWays",
};

std::unique_ptr< BenchmarkService::Stub> BenchmarkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BenchmarkService::Stub> stub(new BenchmarkService::Stub(channel));
  return stub;
}

BenchmarkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UnaryCall_(BenchmarkService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamingCall_(BenchmarkService_method_names[1], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_StreamingFromClient_(BenchmarkService_method_names[2], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_StreamingFromServer_(BenchmarkService_method_names[3], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamingBothWays_(BenchmarkService_method_names[4], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status BenchmarkService::Stub::UnaryCall(::grpc::ClientContext* context, const ::grpc::testing::SimpleRequest& request, ::grpc::testing::SimpleResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UnaryCall_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::testing::SimpleResponse>* BenchmarkService::Stub::AsyncUnaryCallRaw(::grpc::ClientContext* context, const ::grpc::testing::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::grpc::testing::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_UnaryCall_, context, request);
}

::grpc::ClientReaderWriter< ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>* BenchmarkService::Stub::StreamingCallRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>(channel_.get(), rpcmethod_StreamingCall_, context);
}

::grpc::ClientAsyncReaderWriter< ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>* BenchmarkService::Stub::AsyncStreamingCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_StreamingCall_, context, tag);
}

::grpc::ClientWriter< ::grpc::testing::SimpleRequest>* BenchmarkService::Stub::StreamingFromClientRaw(::grpc::ClientContext* context, ::grpc::testing::SimpleResponse* response) {
  return new ::grpc::ClientWriter< ::grpc::testing::SimpleRequest>(channel_.get(), rpcmethod_StreamingFromClient_, context, response);
}

::grpc::ClientAsyncWriter< ::grpc::testing::SimpleRequest>* BenchmarkService::Stub::AsyncStreamingFromClientRaw(::grpc::ClientContext* context, ::grpc::testing::SimpleResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::grpc::testing::SimpleRequest>::Create(channel_.get(), cq, rpcmethod_StreamingFromClient_, context, response, tag);
}

::grpc::ClientReader< ::grpc::testing::SimpleResponse>* BenchmarkService::Stub::StreamingFromServerRaw(::grpc::ClientContext* context, const ::grpc::testing::SimpleRequest& request) {
  return new ::grpc::ClientReader< ::grpc::testing::SimpleResponse>(channel_.get(), rpcmethod_StreamingFromServer_, context, request);
}

::grpc::ClientAsyncReader< ::grpc::testing::SimpleResponse>* BenchmarkService::Stub::AsyncStreamingFromServerRaw(::grpc::ClientContext* context, const ::grpc::testing::SimpleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::grpc::testing::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_StreamingFromServer_, context, request, tag);
}

::grpc::ClientReaderWriter< ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>* BenchmarkService::Stub::StreamingBothWaysRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>(channel_.get(), rpcmethod_StreamingBothWays_, context);
}

::grpc::ClientAsyncReaderWriter< ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>* BenchmarkService::Stub::AsyncStreamingBothWaysRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_StreamingBothWays_, context, tag);
}

BenchmarkService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      BenchmarkService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BenchmarkService::Service, ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>(
          std::mem_fn(&BenchmarkService::Service::UnaryCall), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BenchmarkService_method_names[1],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< BenchmarkService::Service, ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>(
          std::mem_fn(&BenchmarkService::Service::StreamingCall), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BenchmarkService_method_names[2],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< BenchmarkService::Service, ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>(
          std::mem_fn(&BenchmarkService::Service::StreamingFromClient), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BenchmarkService_method_names[3],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BenchmarkService::Service, ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>(
          std::mem_fn(&BenchmarkService::Service::StreamingFromServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BenchmarkService_method_names[4],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< BenchmarkService::Service, ::grpc::testing::SimpleRequest, ::grpc::testing::SimpleResponse>(
          std::mem_fn(&BenchmarkService::Service::StreamingBothWays), this)));
}

BenchmarkService::Service::~Service() {
}

::grpc::Status BenchmarkService::Service::UnaryCall(::grpc::ServerContext* context, const ::grpc::testing::SimpleRequest* request, ::grpc::testing::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BenchmarkService::Service::StreamingCall(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::testing::SimpleResponse, ::grpc::testing::SimpleRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BenchmarkService::Service::StreamingFromClient(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpc::testing::SimpleRequest>* reader, ::grpc::testing::SimpleResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BenchmarkService::Service::StreamingFromServer(::grpc::ServerContext* context, const ::grpc::testing::SimpleRequest* request, ::grpc::ServerWriter< ::grpc::testing::SimpleResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BenchmarkService::Service::StreamingBothWays(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::testing::SimpleResponse, ::grpc::testing::SimpleRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WorkerService_method_names[] = {
  "/grpc.testing.WorkerService/RunServer",
  "/grpc.testing.WorkerService/RunClient",
  "/grpc.testing.WorkerService/CoreCount",
  "/grpc.testing.WorkerService/QuitWorker",
};

std::unique_ptr< WorkerService::Stub> WorkerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< WorkerService::Stub> stub(new WorkerService::Stub(channel));
  return stub;
}

WorkerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RunServer_(WorkerService_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_RunClient_(WorkerService_method_names[1], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_CoreCount_(WorkerService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuitWorker_(WorkerService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::grpc::testing::ServerArgs, ::grpc::testing::ServerStatus>* WorkerService::Stub::RunServerRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::grpc::testing::ServerArgs, ::grpc::testing::ServerStatus>(channel_.get(), rpcmethod_RunServer_, context);
}

::grpc::ClientAsyncReaderWriter< ::grpc::testing::ServerArgs, ::grpc::testing::ServerStatus>* WorkerService::Stub::AsyncRunServerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::grpc::testing::ServerArgs, ::grpc::testing::ServerStatus>::Create(channel_.get(), cq, rpcmethod_RunServer_, context, tag);
}

::grpc::ClientReaderWriter< ::grpc::testing::ClientArgs, ::grpc::testing::ClientStatus>* WorkerService::Stub::RunClientRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::grpc::testing::ClientArgs, ::grpc::testing::ClientStatus>(channel_.get(), rpcmethod_RunClient_, context);
}

::grpc::ClientAsyncReaderWriter< ::grpc::testing::ClientArgs, ::grpc::testing::ClientStatus>* WorkerService::Stub::AsyncRunClientRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::grpc::testing::ClientArgs, ::grpc::testing::ClientStatus>::Create(channel_.get(), cq, rpcmethod_RunClient_, context, tag);
}

::grpc::Status WorkerService::Stub::CoreCount(::grpc::ClientContext* context, const ::grpc::testing::CoreRequest& request, ::grpc::testing::CoreResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CoreCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::testing::CoreResponse>* WorkerService::Stub::AsyncCoreCountRaw(::grpc::ClientContext* context, const ::grpc::testing::CoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::grpc::testing::CoreResponse>::Create(channel_.get(), cq, rpcmethod_CoreCount_, context, request);
}

::grpc::Status WorkerService::Stub::QuitWorker(::grpc::ClientContext* context, const ::grpc::testing::Void& request, ::grpc::testing::Void* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QuitWorker_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::testing::Void>* WorkerService::Stub::AsyncQuitWorkerRaw(::grpc::ClientContext* context, const ::grpc::testing::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::grpc::testing::Void>::Create(channel_.get(), cq, rpcmethod_QuitWorker_, context, request);
}

WorkerService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< WorkerService::Service, ::grpc::testing::ServerArgs, ::grpc::testing::ServerStatus>(
          std::mem_fn(&WorkerService::Service::RunServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[1],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< WorkerService::Service, ::grpc::testing::ClientArgs, ::grpc::testing::ClientStatus>(
          std::mem_fn(&WorkerService::Service::RunClient), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::grpc::testing::CoreRequest, ::grpc::testing::CoreResponse>(
          std::mem_fn(&WorkerService::Service::CoreCount), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::grpc::testing::Void, ::grpc::testing::Void>(
          std::mem_fn(&WorkerService::Service::QuitWorker), this)));
}

WorkerService::Service::~Service() {
}

::grpc::Status WorkerService::Service::RunServer(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::testing::ServerStatus, ::grpc::testing::ServerArgs>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RunClient(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::testing::ClientStatus, ::grpc::testing::ClientArgs>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CoreCount(::grpc::ServerContext* context, const ::grpc::testing::CoreRequest* request, ::grpc::testing::CoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::QuitWorker(::grpc::ServerContext* context, const ::grpc::testing::Void* request, ::grpc::testing::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ReportQpsScenarioService_method_names[] = {
  "/grpc.testing.ReportQpsScenarioService/ReportScenario",
};

std::unique_ptr< ReportQpsScenarioService::Stub> ReportQpsScenarioService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ReportQpsScenarioService::Stub> stub(new ReportQpsScenarioService::Stub(channel));
  return stub;
}

ReportQpsScenarioService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ReportScenario_(ReportQpsScenarioService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReportQpsScenarioService::Stub::ReportScenario(::grpc::ClientContext* context, const ::grpc::testing::ScenarioResult& request, ::grpc::testing::Void* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ReportScenario_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::testing::Void>* ReportQpsScenarioService::Stub::AsyncReportScenarioRaw(::grpc::ClientContext* context, const ::grpc::testing::ScenarioResult& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::grpc::testing::Void>::Create(channel_.get(), cq, rpcmethod_ReportScenario_, context, request);
}

ReportQpsScenarioService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      ReportQpsScenarioService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ReportQpsScenarioService::Service, ::grpc::testing::ScenarioResult, ::grpc::testing::Void>(
          std::mem_fn(&ReportQpsScenarioService::Service::ReportScenario), this)));
}

ReportQpsScenarioService::Service::~Service() {
}

::grpc::Status ReportQpsScenarioService::Service::ReportScenario(::grpc::ServerContext* context, const ::grpc::testing::ScenarioResult* request, ::grpc::testing::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc
}  // namespace testing

