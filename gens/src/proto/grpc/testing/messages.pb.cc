// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/grpc/testing/messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "src/proto/grpc/testing/messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace grpc {
namespace testing {
class BoolValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BoolValue> {
} _BoolValue_default_instance_;
class PayloadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Payload> {
} _Payload_default_instance_;
class EchoStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EchoStatus> {
} _EchoStatus_default_instance_;
class SimpleRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimpleRequest> {
} _SimpleRequest_default_instance_;
class SimpleResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimpleResponse> {
} _SimpleResponse_default_instance_;
class StreamingInputCallRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamingInputCallRequest> {
} _StreamingInputCallRequest_default_instance_;
class StreamingInputCallResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamingInputCallResponse> {
} _StreamingInputCallResponse_default_instance_;
class ResponseParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseParameters> {
} _ResponseParameters_default_instance_;
class StreamingOutputCallRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamingOutputCallRequest> {
} _StreamingOutputCallRequest_default_instance_;
class StreamingOutputCallResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamingOutputCallResponse> {
} _StreamingOutputCallResponse_default_instance_;
class ReconnectParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReconnectParams> {
} _ReconnectParams_default_instance_;
class ReconnectInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReconnectInfo> {
} _ReconnectInfo_default_instance_;

namespace protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoStatus, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoStatus, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, response_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, response_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, fill_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, fill_oauth_scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, response_compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, response_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, expect_compressed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, oauth_scope_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingInputCallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingInputCallRequest, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingInputCallRequest, expect_compressed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingInputCallResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingInputCallResponse, aggregated_payload_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseParameters, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseParameters, interval_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseParameters, compressed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingOutputCallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingOutputCallRequest, response_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingOutputCallRequest, response_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingOutputCallRequest, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingOutputCallRequest, response_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingOutputCallResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingOutputCallResponse, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectParams, max_reconnect_backoff_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectInfo, passed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectInfo, backoff_ms_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(BoolValue)},
  { 6, -1, sizeof(Payload)},
  { 13, -1, sizeof(EchoStatus)},
  { 20, -1, sizeof(SimpleRequest)},
  { 33, -1, sizeof(SimpleResponse)},
  { 41, -1, sizeof(StreamingInputCallRequest)},
  { 48, -1, sizeof(StreamingInputCallResponse)},
  { 54, -1, sizeof(ResponseParameters)},
  { 62, -1, sizeof(StreamingOutputCallRequest)},
  { 71, -1, sizeof(StreamingOutputCallResponse)},
  { 77, -1, sizeof(ReconnectParams)},
  { 83, -1, sizeof(ReconnectInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoolValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Payload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EchoStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingInputCallRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingInputCallResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingOutputCallRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingOutputCallResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReconnectParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReconnectInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "src/proto/grpc/testing/messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _BoolValue_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Payload_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EchoStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SimpleRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SimpleResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _StreamingInputCallRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _StreamingInputCallResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ResponseParameters_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _StreamingOutputCallRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _StreamingOutputCallResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ReconnectParams_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ReconnectInfo_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BoolValue_default_instance_.DefaultConstruct();
  _Payload_default_instance_.DefaultConstruct();
  _EchoStatus_default_instance_.DefaultConstruct();
  _SimpleRequest_default_instance_.DefaultConstruct();
  _SimpleResponse_default_instance_.DefaultConstruct();
  _StreamingInputCallRequest_default_instance_.DefaultConstruct();
  _StreamingInputCallResponse_default_instance_.DefaultConstruct();
  _ResponseParameters_default_instance_.DefaultConstruct();
  _StreamingOutputCallRequest_default_instance_.DefaultConstruct();
  _StreamingOutputCallResponse_default_instance_.DefaultConstruct();
  _ReconnectParams_default_instance_.DefaultConstruct();
  _ReconnectInfo_default_instance_.DefaultConstruct();
  _SimpleRequest_default_instance_.get_mutable()->payload_ = const_cast< ::grpc::testing::Payload*>(
      ::grpc::testing::Payload::internal_default_instance());
  _SimpleRequest_default_instance_.get_mutable()->response_compressed_ = const_cast< ::grpc::testing::BoolValue*>(
      ::grpc::testing::BoolValue::internal_default_instance());
  _SimpleRequest_default_instance_.get_mutable()->response_status_ = const_cast< ::grpc::testing::EchoStatus*>(
      ::grpc::testing::EchoStatus::internal_default_instance());
  _SimpleRequest_default_instance_.get_mutable()->expect_compressed_ = const_cast< ::grpc::testing::BoolValue*>(
      ::grpc::testing::BoolValue::internal_default_instance());
  _SimpleResponse_default_instance_.get_mutable()->payload_ = const_cast< ::grpc::testing::Payload*>(
      ::grpc::testing::Payload::internal_default_instance());
  _StreamingInputCallRequest_default_instance_.get_mutable()->payload_ = const_cast< ::grpc::testing::Payload*>(
      ::grpc::testing::Payload::internal_default_instance());
  _StreamingInputCallRequest_default_instance_.get_mutable()->expect_compressed_ = const_cast< ::grpc::testing::BoolValue*>(
      ::grpc::testing::BoolValue::internal_default_instance());
  _ResponseParameters_default_instance_.get_mutable()->compressed_ = const_cast< ::grpc::testing::BoolValue*>(
      ::grpc::testing::BoolValue::internal_default_instance());
  _StreamingOutputCallRequest_default_instance_.get_mutable()->payload_ = const_cast< ::grpc::testing::Payload*>(
      ::grpc::testing::Payload::internal_default_instance());
  _StreamingOutputCallRequest_default_instance_.get_mutable()->response_status_ = const_cast< ::grpc::testing::EchoStatus*>(
      ::grpc::testing::EchoStatus::internal_default_instance());
  _StreamingOutputCallResponse_default_instance_.get_mutable()->payload_ = const_cast< ::grpc::testing::Payload*>(
      ::grpc::testing::Payload::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%src/proto/grpc/testing/messages.proto\022"
      "\014grpc.testing\"\032\n\tBoolValue\022\r\n\005value\030\001 \001("
      "\010\"@\n\007Payload\022\'\n\004type\030\001 \001(\0162\031.grpc.testin"
      "g.PayloadType\022\014\n\004body\030\002 \001(\014\"+\n\nEchoStatu"
      "s\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\"\316\002\n\rSim"
      "pleRequest\0220\n\rresponse_type\030\001 \001(\0162\031.grpc"
      ".testing.PayloadType\022\025\n\rresponse_size\030\002 "
      "\001(\005\022&\n\007payload\030\003 \001(\0132\025.grpc.testing.Payl"
      "oad\022\025\n\rfill_username\030\004 \001(\010\022\030\n\020fill_oauth"
      "_scope\030\005 \001(\010\0224\n\023response_compressed\030\006 \001("
      "\0132\027.grpc.testing.BoolValue\0221\n\017response_s"
      "tatus\030\007 \001(\0132\030.grpc.testing.EchoStatus\0222\n"
      "\021expect_compressed\030\010 \001(\0132\027.grpc.testing."
      "BoolValue\"_\n\016SimpleResponse\022&\n\007payload\030\001"
      " \001(\0132\025.grpc.testing.Payload\022\020\n\010username\030"
      "\002 \001(\t\022\023\n\013oauth_scope\030\003 \001(\t\"w\n\031StreamingI"
      "nputCallRequest\022&\n\007payload\030\001 \001(\0132\025.grpc."
      "testing.Payload\0222\n\021expect_compressed\030\002 \001"
      "(\0132\027.grpc.testing.BoolValue\"=\n\032Streaming"
      "InputCallResponse\022\037\n\027aggregated_payload_"
      "size\030\001 \001(\005\"d\n\022ResponseParameters\022\014\n\004size"
      "\030\001 \001(\005\022\023\n\013interval_us\030\002 \001(\005\022+\n\ncompresse"
      "d\030\003 \001(\0132\027.grpc.testing.BoolValue\"\350\001\n\032Str"
      "eamingOutputCallRequest\0220\n\rresponse_type"
      "\030\001 \001(\0162\031.grpc.testing.PayloadType\022=\n\023res"
      "ponse_parameters\030\002 \003(\0132 .grpc.testing.Re"
      "sponseParameters\022&\n\007payload\030\003 \001(\0132\025.grpc"
      ".testing.Payload\0221\n\017response_status\030\007 \001("
      "\0132\030.grpc.testing.EchoStatus\"E\n\033Streaming"
      "OutputCallResponse\022&\n\007payload\030\001 \001(\0132\025.gr"
      "pc.testing.Payload\"3\n\017ReconnectParams\022 \n"
      "\030max_reconnect_backoff_ms\030\001 \001(\005\"3\n\rRecon"
      "nectInfo\022\016\n\006passed\030\001 \001(\010\022\022\n\nbackoff_ms\030\002"
      " \003(\005*\037\n\013PayloadType\022\020\n\014COMPRESSABLE\020\000b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/proto/grpc/testing/messages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto

const ::google::protobuf::EnumDescriptor* PayloadType_descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_enum_descriptors[0];
}
bool PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolValue::BoolValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.BoolValue)
}
BoolValue::BoolValue(const BoolValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.BoolValue)
}

void BoolValue::SharedCtor() {
  value_ = false;
  _cached_size_ = 0;
}

BoolValue::~BoolValue() {
  // @@protoc_insertion_point(destructor:grpc.testing.BoolValue)
  SharedDtor();
}

void BoolValue::SharedDtor() {
}

void BoolValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolValue::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoolValue& BoolValue::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoolValue* BoolValue::New(::google::protobuf::Arena* arena) const {
  BoolValue* n = new BoolValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoolValue::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.BoolValue)
  value_ = false;
}

bool BoolValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.BoolValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.BoolValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.BoolValue)
  return false;
#undef DO_
}

void BoolValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.BoolValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.BoolValue)
}

::google::protobuf::uint8* BoolValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.BoolValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.BoolValue)
  return target;
}

size_t BoolValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.BoolValue)
  size_t total_size = 0;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.BoolValue)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoolValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.BoolValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.BoolValue)
    MergeFrom(*source);
  }
}

void BoolValue::MergeFrom(const BoolValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.BoolValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BoolValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.BoolValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolValue::CopyFrom(const BoolValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.BoolValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolValue::IsInitialized() const {
  return true;
}

void BoolValue::Swap(BoolValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolValue::InternalSwap(BoolValue* other) {
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoolValue::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoolValue

// bool value = 1;
void BoolValue::clear_value() {
  value_ = false;
}
bool BoolValue::value() const {
  // @@protoc_insertion_point(field_get:grpc.testing.BoolValue.value)
  return value_;
}
void BoolValue::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.BoolValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Payload::kTypeFieldNumber;
const int Payload::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Payload::Payload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.Payload)
}
Payload::Payload(const Payload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.Payload)
}

void Payload::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:grpc.testing.Payload)
  SharedDtor();
}

void Payload::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Payload::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Payload& Payload::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Payload* Payload::New(::google::protobuf::Arena* arena) const {
  Payload* n = new Payload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.Payload)
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.Payload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.PayloadType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::grpc::testing::PayloadType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.Payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.Payload)
  return false;
#undef DO_
}

void Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.Payload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.PayloadType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bytes body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.Payload)
}

::google::protobuf::uint8* Payload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.Payload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.PayloadType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bytes body = 2;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.Payload)
  size_t total_size = 0;

  // bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // .grpc.testing.PayloadType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Payload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const Payload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Payload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.Payload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.Payload)
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Payload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::Swap(Payload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Payload::InternalSwap(Payload* other) {
  body_.Swap(&other->body_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Payload::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Payload

// .grpc.testing.PayloadType type = 1;
void Payload::clear_type() {
  type_ = 0;
}
::grpc::testing::PayloadType Payload::type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Payload.type)
  return static_cast< ::grpc::testing::PayloadType >(type_);
}
void Payload::set_type(::grpc::testing::PayloadType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Payload.type)
}

// bytes body = 2;
void Payload::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Payload::body() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Payload.body)
  return body_.GetNoArena();
}
void Payload::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.Payload.body)
}
#if LANG_CXX11
void Payload::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.Payload.body)
}
#endif
void Payload::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.Payload.body)
}
void Payload::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.Payload.body)
}
::std::string* Payload::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.Payload.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Payload::release_body() {
  // @@protoc_insertion_point(field_release:grpc.testing.Payload.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Payload::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.Payload.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoStatus::kCodeFieldNumber;
const int EchoStatus::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoStatus::EchoStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.EchoStatus)
}
EchoStatus::EchoStatus(const EchoStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.EchoStatus)
}

void EchoStatus::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

EchoStatus::~EchoStatus() {
  // @@protoc_insertion_point(destructor:grpc.testing.EchoStatus)
  SharedDtor();
}

void EchoStatus::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EchoStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoStatus::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EchoStatus& EchoStatus::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

EchoStatus* EchoStatus::New(::google::protobuf::Arena* arena) const {
  EchoStatus* n = new EchoStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EchoStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.EchoStatus)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

bool EchoStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.EchoStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.EchoStatus.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.EchoStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.EchoStatus)
  return false;
#undef DO_
}

void EchoStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.EchoStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.EchoStatus.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.EchoStatus)
}

::google::protobuf::uint8* EchoStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.EchoStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.EchoStatus.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.EchoStatus)
  return target;
}

size_t EchoStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.EchoStatus)
  size_t total_size = 0;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.EchoStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EchoStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.EchoStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.EchoStatus)
    MergeFrom(*source);
  }
}

void EchoStatus::MergeFrom(const EchoStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.EchoStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void EchoStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.EchoStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoStatus::CopyFrom(const EchoStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.EchoStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoStatus::IsInitialized() const {
  return true;
}

void EchoStatus::Swap(EchoStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoStatus::InternalSwap(EchoStatus* other) {
  message_.Swap(&other->message_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EchoStatus::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EchoStatus

// int32 code = 1;
void EchoStatus::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 EchoStatus::code() const {
  // @@protoc_insertion_point(field_get:grpc.testing.EchoStatus.code)
  return code_;
}
void EchoStatus::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.EchoStatus.code)
}

// string message = 2;
void EchoStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EchoStatus::message() const {
  // @@protoc_insertion_point(field_get:grpc.testing.EchoStatus.message)
  return message_.GetNoArena();
}
void EchoStatus::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.EchoStatus.message)
}
#if LANG_CXX11
void EchoStatus::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.EchoStatus.message)
}
#endif
void EchoStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.EchoStatus.message)
}
void EchoStatus::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.EchoStatus.message)
}
::std::string* EchoStatus::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.EchoStatus.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EchoStatus::release_message() {
  // @@protoc_insertion_point(field_release:grpc.testing.EchoStatus.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EchoStatus::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.EchoStatus.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleRequest::kResponseTypeFieldNumber;
const int SimpleRequest::kResponseSizeFieldNumber;
const int SimpleRequest::kPayloadFieldNumber;
const int SimpleRequest::kFillUsernameFieldNumber;
const int SimpleRequest::kFillOauthScopeFieldNumber;
const int SimpleRequest::kResponseCompressedFieldNumber;
const int SimpleRequest::kResponseStatusFieldNumber;
const int SimpleRequest::kExpectCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleRequest::SimpleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SimpleRequest)
}
SimpleRequest::SimpleRequest(const SimpleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payload()) {
    payload_ = new ::grpc::testing::Payload(*from.payload_);
  } else {
    payload_ = NULL;
  }
  if (from.has_response_compressed()) {
    response_compressed_ = new ::grpc::testing::BoolValue(*from.response_compressed_);
  } else {
    response_compressed_ = NULL;
  }
  if (from.has_response_status()) {
    response_status_ = new ::grpc::testing::EchoStatus(*from.response_status_);
  } else {
    response_status_ = NULL;
  }
  if (from.has_expect_compressed()) {
    expect_compressed_ = new ::grpc::testing::BoolValue(*from.expect_compressed_);
  } else {
    expect_compressed_ = NULL;
  }
  ::memcpy(&response_type_, &from.response_type_,
    reinterpret_cast<char*>(&fill_oauth_scope_) -
    reinterpret_cast<char*>(&response_type_) + sizeof(fill_oauth_scope_));
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SimpleRequest)
}

void SimpleRequest::SharedCtor() {
  ::memset(&payload_, 0, reinterpret_cast<char*>(&fill_oauth_scope_) -
    reinterpret_cast<char*>(&payload_) + sizeof(fill_oauth_scope_));
  _cached_size_ = 0;
}

SimpleRequest::~SimpleRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.SimpleRequest)
  SharedDtor();
}

void SimpleRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete payload_;
  }
  if (this != internal_default_instance()) {
    delete response_compressed_;
  }
  if (this != internal_default_instance()) {
    delete response_status_;
  }
  if (this != internal_default_instance()) {
    delete expect_compressed_;
  }
}

void SimpleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleRequest::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleRequest& SimpleRequest::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleRequest* SimpleRequest::New(::google::protobuf::Arena* arena) const {
  SimpleRequest* n = new SimpleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.SimpleRequest)
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_compressed_ != NULL) {
    delete response_compressed_;
  }
  response_compressed_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_status_ != NULL) {
    delete response_status_;
  }
  response_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && expect_compressed_ != NULL) {
    delete expect_compressed_;
  }
  expect_compressed_ = NULL;
  ::memset(&response_type_, 0, reinterpret_cast<char*>(&fill_oauth_scope_) -
    reinterpret_cast<char*>(&response_type_) + sizeof(fill_oauth_scope_));
}

bool SimpleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SimpleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.PayloadType response_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response_type(static_cast< ::grpc::testing::PayloadType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 response_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.Payload payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fill_username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_username_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fill_oauth_scope = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_oauth_scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.BoolValue response_compressed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.EchoStatus response_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.BoolValue expect_compressed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expect_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SimpleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SimpleRequest)
  return false;
#undef DO_
}

void SimpleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SimpleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_type(), output);
  }

  // int32 response_size = 2;
  if (this->response_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->response_size(), output);
  }

  // .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->payload_, output);
  }

  // bool fill_username = 4;
  if (this->fill_username() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fill_username(), output);
  }

  // bool fill_oauth_scope = 5;
  if (this->fill_oauth_scope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fill_oauth_scope(), output);
  }

  // .grpc.testing.BoolValue response_compressed = 6;
  if (this->has_response_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->response_compressed_, output);
  }

  // .grpc.testing.EchoStatus response_status = 7;
  if (this->has_response_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->response_status_, output);
  }

  // .grpc.testing.BoolValue expect_compressed = 8;
  if (this->has_expect_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->expect_compressed_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.SimpleRequest)
}

::google::protobuf::uint8* SimpleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SimpleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_type(), target);
  }

  // int32 response_size = 2;
  if (this->response_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->response_size(), target);
  }

  // .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->payload_, deterministic, target);
  }

  // bool fill_username = 4;
  if (this->fill_username() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fill_username(), target);
  }

  // bool fill_oauth_scope = 5;
  if (this->fill_oauth_scope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fill_oauth_scope(), target);
  }

  // .grpc.testing.BoolValue response_compressed = 6;
  if (this->has_response_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->response_compressed_, deterministic, target);
  }

  // .grpc.testing.EchoStatus response_status = 7;
  if (this->has_response_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->response_status_, deterministic, target);
  }

  // .grpc.testing.BoolValue expect_compressed = 8;
  if (this->has_expect_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->expect_compressed_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SimpleRequest)
  return target;
}

size_t SimpleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.SimpleRequest)
  size_t total_size = 0;

  // .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  // .grpc.testing.BoolValue response_compressed = 6;
  if (this->has_response_compressed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_compressed_);
  }

  // .grpc.testing.EchoStatus response_status = 7;
  if (this->has_response_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_status_);
  }

  // .grpc.testing.BoolValue expect_compressed = 8;
  if (this->has_expect_compressed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expect_compressed_);
  }

  // .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
  }

  // int32 response_size = 2;
  if (this->response_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_size());
  }

  // bool fill_username = 4;
  if (this->fill_username() != 0) {
    total_size += 1 + 1;
  }

  // bool fill_oauth_scope = 5;
  if (this->fill_oauth_scope() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.SimpleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.SimpleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.SimpleRequest)
    MergeFrom(*source);
  }
}

void SimpleRequest::MergeFrom(const SimpleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.SimpleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    mutable_payload()->::grpc::testing::Payload::MergeFrom(from.payload());
  }
  if (from.has_response_compressed()) {
    mutable_response_compressed()->::grpc::testing::BoolValue::MergeFrom(from.response_compressed());
  }
  if (from.has_response_status()) {
    mutable_response_status()->::grpc::testing::EchoStatus::MergeFrom(from.response_status());
  }
  if (from.has_expect_compressed()) {
    mutable_expect_compressed()->::grpc::testing::BoolValue::MergeFrom(from.expect_compressed());
  }
  if (from.response_type() != 0) {
    set_response_type(from.response_type());
  }
  if (from.response_size() != 0) {
    set_response_size(from.response_size());
  }
  if (from.fill_username() != 0) {
    set_fill_username(from.fill_username());
  }
  if (from.fill_oauth_scope() != 0) {
    set_fill_oauth_scope(from.fill_oauth_scope());
  }
}

void SimpleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.SimpleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleRequest::CopyFrom(const SimpleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.SimpleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRequest::IsInitialized() const {
  return true;
}

void SimpleRequest::Swap(SimpleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleRequest::InternalSwap(SimpleRequest* other) {
  std::swap(payload_, other->payload_);
  std::swap(response_compressed_, other->response_compressed_);
  std::swap(response_status_, other->response_status_);
  std::swap(expect_compressed_, other->expect_compressed_);
  std::swap(response_type_, other->response_type_);
  std::swap(response_size_, other->response_size_);
  std::swap(fill_username_, other->fill_username_);
  std::swap(fill_oauth_scope_, other->fill_oauth_scope_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleRequest

// .grpc.testing.PayloadType response_type = 1;
void SimpleRequest::clear_response_type() {
  response_type_ = 0;
}
::grpc::testing::PayloadType SimpleRequest::response_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.response_type)
  return static_cast< ::grpc::testing::PayloadType >(response_type_);
}
void SimpleRequest::set_response_type(::grpc::testing::PayloadType value) {
  
  response_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.SimpleRequest.response_type)
}

// int32 response_size = 2;
void SimpleRequest::clear_response_size() {
  response_size_ = 0;
}
::google::protobuf::int32 SimpleRequest::response_size() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.response_size)
  return response_size_;
}
void SimpleRequest::set_response_size(::google::protobuf::int32 value) {
  
  response_size_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.SimpleRequest.response_size)
}

// .grpc.testing.Payload payload = 3;
bool SimpleRequest::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
void SimpleRequest::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
const ::grpc::testing::Payload& SimpleRequest::payload() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.payload)
  return payload_ != NULL ? *payload_
                         : *::grpc::testing::Payload::internal_default_instance();
}
::grpc::testing::Payload* SimpleRequest::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::grpc::testing::Payload;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleRequest.payload)
  return payload_;
}
::grpc::testing::Payload* SimpleRequest::release_payload() {
  // @@protoc_insertion_point(field_release:grpc.testing.SimpleRequest.payload)
  
  ::grpc::testing::Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
void SimpleRequest::set_allocated_payload(::grpc::testing::Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleRequest.payload)
}

// bool fill_username = 4;
void SimpleRequest::clear_fill_username() {
  fill_username_ = false;
}
bool SimpleRequest::fill_username() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.fill_username)
  return fill_username_;
}
void SimpleRequest::set_fill_username(bool value) {
  
  fill_username_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.SimpleRequest.fill_username)
}

// bool fill_oauth_scope = 5;
void SimpleRequest::clear_fill_oauth_scope() {
  fill_oauth_scope_ = false;
}
bool SimpleRequest::fill_oauth_scope() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.fill_oauth_scope)
  return fill_oauth_scope_;
}
void SimpleRequest::set_fill_oauth_scope(bool value) {
  
  fill_oauth_scope_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.SimpleRequest.fill_oauth_scope)
}

// .grpc.testing.BoolValue response_compressed = 6;
bool SimpleRequest::has_response_compressed() const {
  return this != internal_default_instance() && response_compressed_ != NULL;
}
void SimpleRequest::clear_response_compressed() {
  if (GetArenaNoVirtual() == NULL && response_compressed_ != NULL) delete response_compressed_;
  response_compressed_ = NULL;
}
const ::grpc::testing::BoolValue& SimpleRequest::response_compressed() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.response_compressed)
  return response_compressed_ != NULL ? *response_compressed_
                         : *::grpc::testing::BoolValue::internal_default_instance();
}
::grpc::testing::BoolValue* SimpleRequest::mutable_response_compressed() {
  
  if (response_compressed_ == NULL) {
    response_compressed_ = new ::grpc::testing::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleRequest.response_compressed)
  return response_compressed_;
}
::grpc::testing::BoolValue* SimpleRequest::release_response_compressed() {
  // @@protoc_insertion_point(field_release:grpc.testing.SimpleRequest.response_compressed)
  
  ::grpc::testing::BoolValue* temp = response_compressed_;
  response_compressed_ = NULL;
  return temp;
}
void SimpleRequest::set_allocated_response_compressed(::grpc::testing::BoolValue* response_compressed) {
  delete response_compressed_;
  response_compressed_ = response_compressed;
  if (response_compressed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleRequest.response_compressed)
}

// .grpc.testing.EchoStatus response_status = 7;
bool SimpleRequest::has_response_status() const {
  return this != internal_default_instance() && response_status_ != NULL;
}
void SimpleRequest::clear_response_status() {
  if (GetArenaNoVirtual() == NULL && response_status_ != NULL) delete response_status_;
  response_status_ = NULL;
}
const ::grpc::testing::EchoStatus& SimpleRequest::response_status() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.response_status)
  return response_status_ != NULL ? *response_status_
                         : *::grpc::testing::EchoStatus::internal_default_instance();
}
::grpc::testing::EchoStatus* SimpleRequest::mutable_response_status() {
  
  if (response_status_ == NULL) {
    response_status_ = new ::grpc::testing::EchoStatus;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleRequest.response_status)
  return response_status_;
}
::grpc::testing::EchoStatus* SimpleRequest::release_response_status() {
  // @@protoc_insertion_point(field_release:grpc.testing.SimpleRequest.response_status)
  
  ::grpc::testing::EchoStatus* temp = response_status_;
  response_status_ = NULL;
  return temp;
}
void SimpleRequest::set_allocated_response_status(::grpc::testing::EchoStatus* response_status) {
  delete response_status_;
  response_status_ = response_status;
  if (response_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleRequest.response_status)
}

// .grpc.testing.BoolValue expect_compressed = 8;
bool SimpleRequest::has_expect_compressed() const {
  return this != internal_default_instance() && expect_compressed_ != NULL;
}
void SimpleRequest::clear_expect_compressed() {
  if (GetArenaNoVirtual() == NULL && expect_compressed_ != NULL) delete expect_compressed_;
  expect_compressed_ = NULL;
}
const ::grpc::testing::BoolValue& SimpleRequest::expect_compressed() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.expect_compressed)
  return expect_compressed_ != NULL ? *expect_compressed_
                         : *::grpc::testing::BoolValue::internal_default_instance();
}
::grpc::testing::BoolValue* SimpleRequest::mutable_expect_compressed() {
  
  if (expect_compressed_ == NULL) {
    expect_compressed_ = new ::grpc::testing::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleRequest.expect_compressed)
  return expect_compressed_;
}
::grpc::testing::BoolValue* SimpleRequest::release_expect_compressed() {
  // @@protoc_insertion_point(field_release:grpc.testing.SimpleRequest.expect_compressed)
  
  ::grpc::testing::BoolValue* temp = expect_compressed_;
  expect_compressed_ = NULL;
  return temp;
}
void SimpleRequest::set_allocated_expect_compressed(::grpc::testing::BoolValue* expect_compressed) {
  delete expect_compressed_;
  expect_compressed_ = expect_compressed;
  if (expect_compressed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleRequest.expect_compressed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleResponse::kPayloadFieldNumber;
const int SimpleResponse::kUsernameFieldNumber;
const int SimpleResponse::kOauthScopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleResponse::SimpleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SimpleResponse)
}
SimpleResponse::SimpleResponse(const SimpleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  oauth_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.oauth_scope().size() > 0) {
    oauth_scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth_scope_);
  }
  if (from.has_payload()) {
    payload_ = new ::grpc::testing::Payload(*from.payload_);
  } else {
    payload_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SimpleResponse)
}

void SimpleResponse::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_ = NULL;
  _cached_size_ = 0;
}

SimpleResponse::~SimpleResponse() {
  // @@protoc_insertion_point(destructor:grpc.testing.SimpleResponse)
  SharedDtor();
}

void SimpleResponse::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete payload_;
  }
}

void SimpleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleResponse::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleResponse& SimpleResponse::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleResponse* SimpleResponse::New(::google::protobuf::Arena* arena) const {
  SimpleResponse* n = new SimpleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.SimpleResponse)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
}

bool SimpleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SimpleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.Payload payload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.SimpleResponse.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oauth_scope = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth_scope()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oauth_scope().data(), this->oauth_scope().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.testing.SimpleResponse.oauth_scope"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SimpleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SimpleResponse)
  return false;
#undef DO_
}

void SimpleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SimpleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->payload_, output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.SimpleResponse.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // string oauth_scope = 3;
  if (this->oauth_scope().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth_scope().data(), this->oauth_scope().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.SimpleResponse.oauth_scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->oauth_scope(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.SimpleResponse)
}

::google::protobuf::uint8* SimpleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SimpleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->payload_, deterministic, target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.SimpleResponse.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // string oauth_scope = 3;
  if (this->oauth_scope().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth_scope().data(), this->oauth_scope().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.testing.SimpleResponse.oauth_scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->oauth_scope(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SimpleResponse)
  return target;
}

size_t SimpleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.SimpleResponse)
  size_t total_size = 0;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string oauth_scope = 3;
  if (this->oauth_scope().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->oauth_scope());
  }

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.SimpleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.SimpleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.SimpleResponse)
    MergeFrom(*source);
  }
}

void SimpleResponse::MergeFrom(const SimpleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.SimpleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.oauth_scope().size() > 0) {

    oauth_scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth_scope_);
  }
  if (from.has_payload()) {
    mutable_payload()->::grpc::testing::Payload::MergeFrom(from.payload());
  }
}

void SimpleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.SimpleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleResponse::CopyFrom(const SimpleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.SimpleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleResponse::IsInitialized() const {
  return true;
}

void SimpleResponse::Swap(SimpleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleResponse::InternalSwap(SimpleResponse* other) {
  username_.Swap(&other->username_);
  oauth_scope_.Swap(&other->oauth_scope_);
  std::swap(payload_, other->payload_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleResponse

// .grpc.testing.Payload payload = 1;
bool SimpleResponse::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
void SimpleResponse::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
const ::grpc::testing::Payload& SimpleResponse::payload() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleResponse.payload)
  return payload_ != NULL ? *payload_
                         : *::grpc::testing::Payload::internal_default_instance();
}
::grpc::testing::Payload* SimpleResponse::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::grpc::testing::Payload;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleResponse.payload)
  return payload_;
}
::grpc::testing::Payload* SimpleResponse::release_payload() {
  // @@protoc_insertion_point(field_release:grpc.testing.SimpleResponse.payload)
  
  ::grpc::testing::Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
void SimpleResponse::set_allocated_payload(::grpc::testing::Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleResponse.payload)
}

// string username = 2;
void SimpleResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SimpleResponse::username() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleResponse.username)
  return username_.GetNoArena();
}
void SimpleResponse::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SimpleResponse.username)
}
#if LANG_CXX11
void SimpleResponse::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.SimpleResponse.username)
}
#endif
void SimpleResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SimpleResponse.username)
}
void SimpleResponse::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SimpleResponse.username)
}
::std::string* SimpleResponse::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleResponse.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimpleResponse::release_username() {
  // @@protoc_insertion_point(field_release:grpc.testing.SimpleResponse.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimpleResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleResponse.username)
}

// string oauth_scope = 3;
void SimpleResponse::clear_oauth_scope() {
  oauth_scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SimpleResponse::oauth_scope() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleResponse.oauth_scope)
  return oauth_scope_.GetNoArena();
}
void SimpleResponse::set_oauth_scope(const ::std::string& value) {
  
  oauth_scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SimpleResponse.oauth_scope)
}
#if LANG_CXX11
void SimpleResponse::set_oauth_scope(::std::string&& value) {
  
  oauth_scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc.testing.SimpleResponse.oauth_scope)
}
#endif
void SimpleResponse::set_oauth_scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  oauth_scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SimpleResponse.oauth_scope)
}
void SimpleResponse::set_oauth_scope(const char* value, size_t size) {
  
  oauth_scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SimpleResponse.oauth_scope)
}
::std::string* SimpleResponse::mutable_oauth_scope() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleResponse.oauth_scope)
  return oauth_scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimpleResponse::release_oauth_scope() {
  // @@protoc_insertion_point(field_release:grpc.testing.SimpleResponse.oauth_scope)
  
  return oauth_scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimpleResponse::set_allocated_oauth_scope(::std::string* oauth_scope) {
  if (oauth_scope != NULL) {
    
  } else {
    
  }
  oauth_scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth_scope);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleResponse.oauth_scope)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingInputCallRequest::kPayloadFieldNumber;
const int StreamingInputCallRequest::kExpectCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingInputCallRequest::StreamingInputCallRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.StreamingInputCallRequest)
}
StreamingInputCallRequest::StreamingInputCallRequest(const StreamingInputCallRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payload()) {
    payload_ = new ::grpc::testing::Payload(*from.payload_);
  } else {
    payload_ = NULL;
  }
  if (from.has_expect_compressed()) {
    expect_compressed_ = new ::grpc::testing::BoolValue(*from.expect_compressed_);
  } else {
    expect_compressed_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.StreamingInputCallRequest)
}

void StreamingInputCallRequest::SharedCtor() {
  ::memset(&payload_, 0, reinterpret_cast<char*>(&expect_compressed_) -
    reinterpret_cast<char*>(&payload_) + sizeof(expect_compressed_));
  _cached_size_ = 0;
}

StreamingInputCallRequest::~StreamingInputCallRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.StreamingInputCallRequest)
  SharedDtor();
}

void StreamingInputCallRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete payload_;
  }
  if (this != internal_default_instance()) {
    delete expect_compressed_;
  }
}

void StreamingInputCallRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingInputCallRequest::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingInputCallRequest& StreamingInputCallRequest::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingInputCallRequest* StreamingInputCallRequest::New(::google::protobuf::Arena* arena) const {
  StreamingInputCallRequest* n = new StreamingInputCallRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamingInputCallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.StreamingInputCallRequest)
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
  if (GetArenaNoVirtual() == NULL && expect_compressed_ != NULL) {
    delete expect_compressed_;
  }
  expect_compressed_ = NULL;
}

bool StreamingInputCallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.StreamingInputCallRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.Payload payload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.BoolValue expect_compressed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expect_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.StreamingInputCallRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.StreamingInputCallRequest)
  return false;
#undef DO_
}

void StreamingInputCallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.StreamingInputCallRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->payload_, output);
  }

  // .grpc.testing.BoolValue expect_compressed = 2;
  if (this->has_expect_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->expect_compressed_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.StreamingInputCallRequest)
}

::google::protobuf::uint8* StreamingInputCallRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.StreamingInputCallRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->payload_, deterministic, target);
  }

  // .grpc.testing.BoolValue expect_compressed = 2;
  if (this->has_expect_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->expect_compressed_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.StreamingInputCallRequest)
  return target;
}

size_t StreamingInputCallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.StreamingInputCallRequest)
  size_t total_size = 0;

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  // .grpc.testing.BoolValue expect_compressed = 2;
  if (this->has_expect_compressed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expect_compressed_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingInputCallRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.StreamingInputCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingInputCallRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingInputCallRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.StreamingInputCallRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.StreamingInputCallRequest)
    MergeFrom(*source);
  }
}

void StreamingInputCallRequest::MergeFrom(const StreamingInputCallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.StreamingInputCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    mutable_payload()->::grpc::testing::Payload::MergeFrom(from.payload());
  }
  if (from.has_expect_compressed()) {
    mutable_expect_compressed()->::grpc::testing::BoolValue::MergeFrom(from.expect_compressed());
  }
}

void StreamingInputCallRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.StreamingInputCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingInputCallRequest::CopyFrom(const StreamingInputCallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.StreamingInputCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingInputCallRequest::IsInitialized() const {
  return true;
}

void StreamingInputCallRequest::Swap(StreamingInputCallRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamingInputCallRequest::InternalSwap(StreamingInputCallRequest* other) {
  std::swap(payload_, other->payload_);
  std::swap(expect_compressed_, other->expect_compressed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingInputCallRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingInputCallRequest

// .grpc.testing.Payload payload = 1;
bool StreamingInputCallRequest::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
void StreamingInputCallRequest::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
const ::grpc::testing::Payload& StreamingInputCallRequest::payload() const {
  // @@protoc_insertion_point(field_get:grpc.testing.StreamingInputCallRequest.payload)
  return payload_ != NULL ? *payload_
                         : *::grpc::testing::Payload::internal_default_instance();
}
::grpc::testing::Payload* StreamingInputCallRequest::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::grpc::testing::Payload;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.StreamingInputCallRequest.payload)
  return payload_;
}
::grpc::testing::Payload* StreamingInputCallRequest::release_payload() {
  // @@protoc_insertion_point(field_release:grpc.testing.StreamingInputCallRequest.payload)
  
  ::grpc::testing::Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
void StreamingInputCallRequest::set_allocated_payload(::grpc::testing::Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.StreamingInputCallRequest.payload)
}

// .grpc.testing.BoolValue expect_compressed = 2;
bool StreamingInputCallRequest::has_expect_compressed() const {
  return this != internal_default_instance() && expect_compressed_ != NULL;
}
void StreamingInputCallRequest::clear_expect_compressed() {
  if (GetArenaNoVirtual() == NULL && expect_compressed_ != NULL) delete expect_compressed_;
  expect_compressed_ = NULL;
}
const ::grpc::testing::BoolValue& StreamingInputCallRequest::expect_compressed() const {
  // @@protoc_insertion_point(field_get:grpc.testing.StreamingInputCallRequest.expect_compressed)
  return expect_compressed_ != NULL ? *expect_compressed_
                         : *::grpc::testing::BoolValue::internal_default_instance();
}
::grpc::testing::BoolValue* StreamingInputCallRequest::mutable_expect_compressed() {
  
  if (expect_compressed_ == NULL) {
    expect_compressed_ = new ::grpc::testing::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.StreamingInputCallRequest.expect_compressed)
  return expect_compressed_;
}
::grpc::testing::BoolValue* StreamingInputCallRequest::release_expect_compressed() {
  // @@protoc_insertion_point(field_release:grpc.testing.StreamingInputCallRequest.expect_compressed)
  
  ::grpc::testing::BoolValue* temp = expect_compressed_;
  expect_compressed_ = NULL;
  return temp;
}
void StreamingInputCallRequest::set_allocated_expect_compressed(::grpc::testing::BoolValue* expect_compressed) {
  delete expect_compressed_;
  expect_compressed_ = expect_compressed;
  if (expect_compressed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.StreamingInputCallRequest.expect_compressed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingInputCallResponse::kAggregatedPayloadSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingInputCallResponse::StreamingInputCallResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.StreamingInputCallResponse)
}
StreamingInputCallResponse::StreamingInputCallResponse(const StreamingInputCallResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aggregated_payload_size_ = from.aggregated_payload_size_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.StreamingInputCallResponse)
}

void StreamingInputCallResponse::SharedCtor() {
  aggregated_payload_size_ = 0;
  _cached_size_ = 0;
}

StreamingInputCallResponse::~StreamingInputCallResponse() {
  // @@protoc_insertion_point(destructor:grpc.testing.StreamingInputCallResponse)
  SharedDtor();
}

void StreamingInputCallResponse::SharedDtor() {
}

void StreamingInputCallResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingInputCallResponse::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingInputCallResponse& StreamingInputCallResponse::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingInputCallResponse* StreamingInputCallResponse::New(::google::protobuf::Arena* arena) const {
  StreamingInputCallResponse* n = new StreamingInputCallResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamingInputCallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.StreamingInputCallResponse)
  aggregated_payload_size_ = 0;
}

bool StreamingInputCallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.StreamingInputCallResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 aggregated_payload_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aggregated_payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.StreamingInputCallResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.StreamingInputCallResponse)
  return false;
#undef DO_
}

void StreamingInputCallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.StreamingInputCallResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 aggregated_payload_size = 1;
  if (this->aggregated_payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aggregated_payload_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.StreamingInputCallResponse)
}

::google::protobuf::uint8* StreamingInputCallResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.StreamingInputCallResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 aggregated_payload_size = 1;
  if (this->aggregated_payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aggregated_payload_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.StreamingInputCallResponse)
  return target;
}

size_t StreamingInputCallResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.StreamingInputCallResponse)
  size_t total_size = 0;

  // int32 aggregated_payload_size = 1;
  if (this->aggregated_payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->aggregated_payload_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingInputCallResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.StreamingInputCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingInputCallResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingInputCallResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.StreamingInputCallResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.StreamingInputCallResponse)
    MergeFrom(*source);
  }
}

void StreamingInputCallResponse::MergeFrom(const StreamingInputCallResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.StreamingInputCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aggregated_payload_size() != 0) {
    set_aggregated_payload_size(from.aggregated_payload_size());
  }
}

void StreamingInputCallResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.StreamingInputCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingInputCallResponse::CopyFrom(const StreamingInputCallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.StreamingInputCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingInputCallResponse::IsInitialized() const {
  return true;
}

void StreamingInputCallResponse::Swap(StreamingInputCallResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamingInputCallResponse::InternalSwap(StreamingInputCallResponse* other) {
  std::swap(aggregated_payload_size_, other->aggregated_payload_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingInputCallResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingInputCallResponse

// int32 aggregated_payload_size = 1;
void StreamingInputCallResponse::clear_aggregated_payload_size() {
  aggregated_payload_size_ = 0;
}
::google::protobuf::int32 StreamingInputCallResponse::aggregated_payload_size() const {
  // @@protoc_insertion_point(field_get:grpc.testing.StreamingInputCallResponse.aggregated_payload_size)
  return aggregated_payload_size_;
}
void StreamingInputCallResponse::set_aggregated_payload_size(::google::protobuf::int32 value) {
  
  aggregated_payload_size_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.StreamingInputCallResponse.aggregated_payload_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseParameters::kSizeFieldNumber;
const int ResponseParameters::kIntervalUsFieldNumber;
const int ResponseParameters::kCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseParameters::ResponseParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ResponseParameters)
}
ResponseParameters::ResponseParameters(const ResponseParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compressed()) {
    compressed_ = new ::grpc::testing::BoolValue(*from.compressed_);
  } else {
    compressed_ = NULL;
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&interval_us_) -
    reinterpret_cast<char*>(&size_) + sizeof(interval_us_));
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ResponseParameters)
}

void ResponseParameters::SharedCtor() {
  ::memset(&compressed_, 0, reinterpret_cast<char*>(&interval_us_) -
    reinterpret_cast<char*>(&compressed_) + sizeof(interval_us_));
  _cached_size_ = 0;
}

ResponseParameters::~ResponseParameters() {
  // @@protoc_insertion_point(destructor:grpc.testing.ResponseParameters)
  SharedDtor();
}

void ResponseParameters::SharedDtor() {
  if (this != internal_default_instance()) {
    delete compressed_;
  }
}

void ResponseParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseParameters::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseParameters& ResponseParameters::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseParameters* ResponseParameters::New(::google::protobuf::Arena* arena) const {
  ResponseParameters* n = new ResponseParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ResponseParameters)
  if (GetArenaNoVirtual() == NULL && compressed_ != NULL) {
    delete compressed_;
  }
  compressed_ = NULL;
  ::memset(&size_, 0, reinterpret_cast<char*>(&interval_us_) -
    reinterpret_cast<char*>(&size_) + sizeof(interval_us_));
}

bool ResponseParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ResponseParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 interval_us = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.BoolValue compressed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ResponseParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ResponseParameters)
  return false;
#undef DO_
}

void ResponseParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ResponseParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // int32 interval_us = 2;
  if (this->interval_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->interval_us(), output);
  }

  // .grpc.testing.BoolValue compressed = 3;
  if (this->has_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->compressed_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ResponseParameters)
}

::google::protobuf::uint8* ResponseParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ResponseParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // int32 interval_us = 2;
  if (this->interval_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->interval_us(), target);
  }

  // .grpc.testing.BoolValue compressed = 3;
  if (this->has_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->compressed_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ResponseParameters)
  return target;
}

size_t ResponseParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ResponseParameters)
  size_t total_size = 0;

  // .grpc.testing.BoolValue compressed = 3;
  if (this->has_compressed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compressed_);
  }

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // int32 interval_us = 2;
  if (this->interval_us() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->interval_us());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ResponseParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ResponseParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ResponseParameters)
    MergeFrom(*source);
  }
}

void ResponseParameters::MergeFrom(const ResponseParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ResponseParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compressed()) {
    mutable_compressed()->::grpc::testing::BoolValue::MergeFrom(from.compressed());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.interval_us() != 0) {
    set_interval_us(from.interval_us());
  }
}

void ResponseParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ResponseParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseParameters::CopyFrom(const ResponseParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ResponseParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseParameters::IsInitialized() const {
  return true;
}

void ResponseParameters::Swap(ResponseParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseParameters::InternalSwap(ResponseParameters* other) {
  std::swap(compressed_, other->compressed_);
  std::swap(size_, other->size_);
  std::swap(interval_us_, other->interval_us_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseParameters::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseParameters

// int32 size = 1;
void ResponseParameters::clear_size() {
  size_ = 0;
}
::google::protobuf::int32 ResponseParameters::size() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ResponseParameters.size)
  return size_;
}
void ResponseParameters::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ResponseParameters.size)
}

// int32 interval_us = 2;
void ResponseParameters::clear_interval_us() {
  interval_us_ = 0;
}
::google::protobuf::int32 ResponseParameters::interval_us() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ResponseParameters.interval_us)
  return interval_us_;
}
void ResponseParameters::set_interval_us(::google::protobuf::int32 value) {
  
  interval_us_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ResponseParameters.interval_us)
}

// .grpc.testing.BoolValue compressed = 3;
bool ResponseParameters::has_compressed() const {
  return this != internal_default_instance() && compressed_ != NULL;
}
void ResponseParameters::clear_compressed() {
  if (GetArenaNoVirtual() == NULL && compressed_ != NULL) delete compressed_;
  compressed_ = NULL;
}
const ::grpc::testing::BoolValue& ResponseParameters::compressed() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ResponseParameters.compressed)
  return compressed_ != NULL ? *compressed_
                         : *::grpc::testing::BoolValue::internal_default_instance();
}
::grpc::testing::BoolValue* ResponseParameters::mutable_compressed() {
  
  if (compressed_ == NULL) {
    compressed_ = new ::grpc::testing::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ResponseParameters.compressed)
  return compressed_;
}
::grpc::testing::BoolValue* ResponseParameters::release_compressed() {
  // @@protoc_insertion_point(field_release:grpc.testing.ResponseParameters.compressed)
  
  ::grpc::testing::BoolValue* temp = compressed_;
  compressed_ = NULL;
  return temp;
}
void ResponseParameters::set_allocated_compressed(::grpc::testing::BoolValue* compressed) {
  delete compressed_;
  compressed_ = compressed;
  if (compressed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ResponseParameters.compressed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingOutputCallRequest::kResponseTypeFieldNumber;
const int StreamingOutputCallRequest::kResponseParametersFieldNumber;
const int StreamingOutputCallRequest::kPayloadFieldNumber;
const int StreamingOutputCallRequest::kResponseStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingOutputCallRequest::StreamingOutputCallRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.StreamingOutputCallRequest)
}
StreamingOutputCallRequest::StreamingOutputCallRequest(const StreamingOutputCallRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      response_parameters_(from.response_parameters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payload()) {
    payload_ = new ::grpc::testing::Payload(*from.payload_);
  } else {
    payload_ = NULL;
  }
  if (from.has_response_status()) {
    response_status_ = new ::grpc::testing::EchoStatus(*from.response_status_);
  } else {
    response_status_ = NULL;
  }
  response_type_ = from.response_type_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.StreamingOutputCallRequest)
}

void StreamingOutputCallRequest::SharedCtor() {
  ::memset(&payload_, 0, reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&payload_) + sizeof(response_type_));
  _cached_size_ = 0;
}

StreamingOutputCallRequest::~StreamingOutputCallRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.StreamingOutputCallRequest)
  SharedDtor();
}

void StreamingOutputCallRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete payload_;
  }
  if (this != internal_default_instance()) {
    delete response_status_;
  }
}

void StreamingOutputCallRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingOutputCallRequest::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingOutputCallRequest& StreamingOutputCallRequest::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingOutputCallRequest* StreamingOutputCallRequest::New(::google::protobuf::Arena* arena) const {
  StreamingOutputCallRequest* n = new StreamingOutputCallRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamingOutputCallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.StreamingOutputCallRequest)
  response_parameters_.Clear();
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_status_ != NULL) {
    delete response_status_;
  }
  response_status_ = NULL;
  response_type_ = 0;
}

bool StreamingOutputCallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.StreamingOutputCallRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.PayloadType response_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response_type(static_cast< ::grpc::testing::PayloadType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.testing.ResponseParameters response_parameters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.Payload payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.testing.EchoStatus response_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.StreamingOutputCallRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.StreamingOutputCallRequest)
  return false;
#undef DO_
}

void StreamingOutputCallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.StreamingOutputCallRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_type(), output);
  }

  // repeated .grpc.testing.ResponseParameters response_parameters = 2;
  for (unsigned int i = 0, n = this->response_parameters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response_parameters(i), output);
  }

  // .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->payload_, output);
  }

  // .grpc.testing.EchoStatus response_status = 7;
  if (this->has_response_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->response_status_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.StreamingOutputCallRequest)
}

::google::protobuf::uint8* StreamingOutputCallRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.StreamingOutputCallRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_type(), target);
  }

  // repeated .grpc.testing.ResponseParameters response_parameters = 2;
  for (unsigned int i = 0, n = this->response_parameters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->response_parameters(i), deterministic, target);
  }

  // .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->payload_, deterministic, target);
  }

  // .grpc.testing.EchoStatus response_status = 7;
  if (this->has_response_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->response_status_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.StreamingOutputCallRequest)
  return target;
}

size_t StreamingOutputCallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.StreamingOutputCallRequest)
  size_t total_size = 0;

  // repeated .grpc.testing.ResponseParameters response_parameters = 2;
  {
    unsigned int count = this->response_parameters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response_parameters(i));
    }
  }

  // .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  // .grpc.testing.EchoStatus response_status = 7;
  if (this->has_response_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_status_);
  }

  // .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingOutputCallRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.StreamingOutputCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingOutputCallRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingOutputCallRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.StreamingOutputCallRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.StreamingOutputCallRequest)
    MergeFrom(*source);
  }
}

void StreamingOutputCallRequest::MergeFrom(const StreamingOutputCallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.StreamingOutputCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_parameters_.MergeFrom(from.response_parameters_);
  if (from.has_payload()) {
    mutable_payload()->::grpc::testing::Payload::MergeFrom(from.payload());
  }
  if (from.has_response_status()) {
    mutable_response_status()->::grpc::testing::EchoStatus::MergeFrom(from.response_status());
  }
  if (from.response_type() != 0) {
    set_response_type(from.response_type());
  }
}

void StreamingOutputCallRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.StreamingOutputCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingOutputCallRequest::CopyFrom(const StreamingOutputCallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.StreamingOutputCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingOutputCallRequest::IsInitialized() const {
  return true;
}

void StreamingOutputCallRequest::Swap(StreamingOutputCallRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamingOutputCallRequest::InternalSwap(StreamingOutputCallRequest* other) {
  response_parameters_.InternalSwap(&other->response_parameters_);
  std::swap(payload_, other->payload_);
  std::swap(response_status_, other->response_status_);
  std::swap(response_type_, other->response_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingOutputCallRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingOutputCallRequest

// .grpc.testing.PayloadType response_type = 1;
void StreamingOutputCallRequest::clear_response_type() {
  response_type_ = 0;
}
::grpc::testing::PayloadType StreamingOutputCallRequest::response_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.StreamingOutputCallRequest.response_type)
  return static_cast< ::grpc::testing::PayloadType >(response_type_);
}
void StreamingOutputCallRequest::set_response_type(::grpc::testing::PayloadType value) {
  
  response_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.StreamingOutputCallRequest.response_type)
}

// repeated .grpc.testing.ResponseParameters response_parameters = 2;
int StreamingOutputCallRequest::response_parameters_size() const {
  return response_parameters_.size();
}
void StreamingOutputCallRequest::clear_response_parameters() {
  response_parameters_.Clear();
}
const ::grpc::testing::ResponseParameters& StreamingOutputCallRequest::response_parameters(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.StreamingOutputCallRequest.response_parameters)
  return response_parameters_.Get(index);
}
::grpc::testing::ResponseParameters* StreamingOutputCallRequest::mutable_response_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.StreamingOutputCallRequest.response_parameters)
  return response_parameters_.Mutable(index);
}
::grpc::testing::ResponseParameters* StreamingOutputCallRequest::add_response_parameters() {
  // @@protoc_insertion_point(field_add:grpc.testing.StreamingOutputCallRequest.response_parameters)
  return response_parameters_.Add();
}
::google::protobuf::RepeatedPtrField< ::grpc::testing::ResponseParameters >*
StreamingOutputCallRequest::mutable_response_parameters() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.StreamingOutputCallRequest.response_parameters)
  return &response_parameters_;
}
const ::google::protobuf::RepeatedPtrField< ::grpc::testing::ResponseParameters >&
StreamingOutputCallRequest::response_parameters() const {
  // @@protoc_insertion_point(field_list:grpc.testing.StreamingOutputCallRequest.response_parameters)
  return response_parameters_;
}

// .grpc.testing.Payload payload = 3;
bool StreamingOutputCallRequest::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
void StreamingOutputCallRequest::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
const ::grpc::testing::Payload& StreamingOutputCallRequest::payload() const {
  // @@protoc_insertion_point(field_get:grpc.testing.StreamingOutputCallRequest.payload)
  return payload_ != NULL ? *payload_
                         : *::grpc::testing::Payload::internal_default_instance();
}
::grpc::testing::Payload* StreamingOutputCallRequest::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::grpc::testing::Payload;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.StreamingOutputCallRequest.payload)
  return payload_;
}
::grpc::testing::Payload* StreamingOutputCallRequest::release_payload() {
  // @@protoc_insertion_point(field_release:grpc.testing.StreamingOutputCallRequest.payload)
  
  ::grpc::testing::Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
void StreamingOutputCallRequest::set_allocated_payload(::grpc::testing::Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.StreamingOutputCallRequest.payload)
}

// .grpc.testing.EchoStatus response_status = 7;
bool StreamingOutputCallRequest::has_response_status() const {
  return this != internal_default_instance() && response_status_ != NULL;
}
void StreamingOutputCallRequest::clear_response_status() {
  if (GetArenaNoVirtual() == NULL && response_status_ != NULL) delete response_status_;
  response_status_ = NULL;
}
const ::grpc::testing::EchoStatus& StreamingOutputCallRequest::response_status() const {
  // @@protoc_insertion_point(field_get:grpc.testing.StreamingOutputCallRequest.response_status)
  return response_status_ != NULL ? *response_status_
                         : *::grpc::testing::EchoStatus::internal_default_instance();
}
::grpc::testing::EchoStatus* StreamingOutputCallRequest::mutable_response_status() {
  
  if (response_status_ == NULL) {
    response_status_ = new ::grpc::testing::EchoStatus;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.StreamingOutputCallRequest.response_status)
  return response_status_;
}
::grpc::testing::EchoStatus* StreamingOutputCallRequest::release_response_status() {
  // @@protoc_insertion_point(field_release:grpc.testing.StreamingOutputCallRequest.response_status)
  
  ::grpc::testing::EchoStatus* temp = response_status_;
  response_status_ = NULL;
  return temp;
}
void StreamingOutputCallRequest::set_allocated_response_status(::grpc::testing::EchoStatus* response_status) {
  delete response_status_;
  response_status_ = response_status;
  if (response_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.StreamingOutputCallRequest.response_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingOutputCallResponse::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingOutputCallResponse::StreamingOutputCallResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.StreamingOutputCallResponse)
}
StreamingOutputCallResponse::StreamingOutputCallResponse(const StreamingOutputCallResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payload()) {
    payload_ = new ::grpc::testing::Payload(*from.payload_);
  } else {
    payload_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.testing.StreamingOutputCallResponse)
}

void StreamingOutputCallResponse::SharedCtor() {
  payload_ = NULL;
  _cached_size_ = 0;
}

StreamingOutputCallResponse::~StreamingOutputCallResponse() {
  // @@protoc_insertion_point(destructor:grpc.testing.StreamingOutputCallResponse)
  SharedDtor();
}

void StreamingOutputCallResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete payload_;
  }
}

void StreamingOutputCallResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingOutputCallResponse::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingOutputCallResponse& StreamingOutputCallResponse::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingOutputCallResponse* StreamingOutputCallResponse::New(::google::protobuf::Arena* arena) const {
  StreamingOutputCallResponse* n = new StreamingOutputCallResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamingOutputCallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.StreamingOutputCallResponse)
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
}

bool StreamingOutputCallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.StreamingOutputCallResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.testing.Payload payload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.StreamingOutputCallResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.StreamingOutputCallResponse)
  return false;
#undef DO_
}

void StreamingOutputCallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.StreamingOutputCallResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->payload_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.StreamingOutputCallResponse)
}

::google::protobuf::uint8* StreamingOutputCallResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.StreamingOutputCallResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->payload_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.StreamingOutputCallResponse)
  return target;
}

size_t StreamingOutputCallResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.StreamingOutputCallResponse)
  size_t total_size = 0;

  // .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingOutputCallResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.StreamingOutputCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingOutputCallResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingOutputCallResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.StreamingOutputCallResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.StreamingOutputCallResponse)
    MergeFrom(*source);
  }
}

void StreamingOutputCallResponse::MergeFrom(const StreamingOutputCallResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.StreamingOutputCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    mutable_payload()->::grpc::testing::Payload::MergeFrom(from.payload());
  }
}

void StreamingOutputCallResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.StreamingOutputCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingOutputCallResponse::CopyFrom(const StreamingOutputCallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.StreamingOutputCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingOutputCallResponse::IsInitialized() const {
  return true;
}

void StreamingOutputCallResponse::Swap(StreamingOutputCallResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamingOutputCallResponse::InternalSwap(StreamingOutputCallResponse* other) {
  std::swap(payload_, other->payload_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingOutputCallResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingOutputCallResponse

// .grpc.testing.Payload payload = 1;
bool StreamingOutputCallResponse::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
void StreamingOutputCallResponse::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
const ::grpc::testing::Payload& StreamingOutputCallResponse::payload() const {
  // @@protoc_insertion_point(field_get:grpc.testing.StreamingOutputCallResponse.payload)
  return payload_ != NULL ? *payload_
                         : *::grpc::testing::Payload::internal_default_instance();
}
::grpc::testing::Payload* StreamingOutputCallResponse::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::grpc::testing::Payload;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.StreamingOutputCallResponse.payload)
  return payload_;
}
::grpc::testing::Payload* StreamingOutputCallResponse::release_payload() {
  // @@protoc_insertion_point(field_release:grpc.testing.StreamingOutputCallResponse.payload)
  
  ::grpc::testing::Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
void StreamingOutputCallResponse::set_allocated_payload(::grpc::testing::Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.StreamingOutputCallResponse.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReconnectParams::kMaxReconnectBackoffMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReconnectParams::ReconnectParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ReconnectParams)
}
ReconnectParams::ReconnectParams(const ReconnectParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_reconnect_backoff_ms_ = from.max_reconnect_backoff_ms_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ReconnectParams)
}

void ReconnectParams::SharedCtor() {
  max_reconnect_backoff_ms_ = 0;
  _cached_size_ = 0;
}

ReconnectParams::~ReconnectParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.ReconnectParams)
  SharedDtor();
}

void ReconnectParams::SharedDtor() {
}

void ReconnectParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectParams::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReconnectParams& ReconnectParams::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReconnectParams* ReconnectParams::New(::google::protobuf::Arena* arena) const {
  ReconnectParams* n = new ReconnectParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReconnectParams::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ReconnectParams)
  max_reconnect_backoff_ms_ = 0;
}

bool ReconnectParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ReconnectParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_reconnect_backoff_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_reconnect_backoff_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ReconnectParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ReconnectParams)
  return false;
#undef DO_
}

void ReconnectParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ReconnectParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_reconnect_backoff_ms = 1;
  if (this->max_reconnect_backoff_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_reconnect_backoff_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ReconnectParams)
}

::google::protobuf::uint8* ReconnectParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ReconnectParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_reconnect_backoff_ms = 1;
  if (this->max_reconnect_backoff_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_reconnect_backoff_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ReconnectParams)
  return target;
}

size_t ReconnectParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ReconnectParams)
  size_t total_size = 0;

  // int32 max_reconnect_backoff_ms = 1;
  if (this->max_reconnect_backoff_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_reconnect_backoff_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ReconnectParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconnectParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReconnectParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ReconnectParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ReconnectParams)
    MergeFrom(*source);
  }
}

void ReconnectParams::MergeFrom(const ReconnectParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ReconnectParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_reconnect_backoff_ms() != 0) {
    set_max_reconnect_backoff_ms(from.max_reconnect_backoff_ms());
  }
}

void ReconnectParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ReconnectParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectParams::CopyFrom(const ReconnectParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ReconnectParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectParams::IsInitialized() const {
  return true;
}

void ReconnectParams::Swap(ReconnectParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReconnectParams::InternalSwap(ReconnectParams* other) {
  std::swap(max_reconnect_backoff_ms_, other->max_reconnect_backoff_ms_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReconnectParams::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReconnectParams

// int32 max_reconnect_backoff_ms = 1;
void ReconnectParams::clear_max_reconnect_backoff_ms() {
  max_reconnect_backoff_ms_ = 0;
}
::google::protobuf::int32 ReconnectParams::max_reconnect_backoff_ms() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ReconnectParams.max_reconnect_backoff_ms)
  return max_reconnect_backoff_ms_;
}
void ReconnectParams::set_max_reconnect_backoff_ms(::google::protobuf::int32 value) {
  
  max_reconnect_backoff_ms_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ReconnectParams.max_reconnect_backoff_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReconnectInfo::kPassedFieldNumber;
const int ReconnectInfo::kBackoffMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReconnectInfo::ReconnectInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ReconnectInfo)
}
ReconnectInfo::ReconnectInfo(const ReconnectInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      backoff_ms_(from.backoff_ms_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  passed_ = from.passed_;
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ReconnectInfo)
}

void ReconnectInfo::SharedCtor() {
  passed_ = false;
  _cached_size_ = 0;
}

ReconnectInfo::~ReconnectInfo() {
  // @@protoc_insertion_point(destructor:grpc.testing.ReconnectInfo)
  SharedDtor();
}

void ReconnectInfo::SharedDtor() {
}

void ReconnectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectInfo::descriptor() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReconnectInfo& ReconnectInfo::default_instance() {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReconnectInfo* ReconnectInfo::New(::google::protobuf::Arena* arena) const {
  ReconnectInfo* n = new ReconnectInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReconnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.testing.ReconnectInfo)
  backoff_ms_.Clear();
  passed_ = false;
}

bool ReconnectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ReconnectInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool passed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 backoff_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_backoff_ms())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_backoff_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ReconnectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ReconnectInfo)
  return false;
#undef DO_
}

void ReconnectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ReconnectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool passed = 1;
  if (this->passed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->passed(), output);
  }

  // repeated int32 backoff_ms = 2;
  if (this->backoff_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_backoff_ms_cached_byte_size_);
  }
  for (int i = 0, n = this->backoff_ms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->backoff_ms(i), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ReconnectInfo)
}

::google::protobuf::uint8* ReconnectInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ReconnectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool passed = 1;
  if (this->passed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->passed(), target);
  }

  // repeated int32 backoff_ms = 2;
  if (this->backoff_ms_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _backoff_ms_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->backoff_ms_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ReconnectInfo)
  return target;
}

size_t ReconnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.testing.ReconnectInfo)
  size_t total_size = 0;

  // repeated int32 backoff_ms = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->backoff_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _backoff_ms_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool passed = 1;
  if (this->passed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.testing.ReconnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconnectInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReconnectInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.testing.ReconnectInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.testing.ReconnectInfo)
    MergeFrom(*source);
  }
}

void ReconnectInfo::MergeFrom(const ReconnectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.testing.ReconnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  backoff_ms_.MergeFrom(from.backoff_ms_);
  if (from.passed() != 0) {
    set_passed(from.passed());
  }
}

void ReconnectInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.testing.ReconnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectInfo::CopyFrom(const ReconnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.testing.ReconnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectInfo::IsInitialized() const {
  return true;
}

void ReconnectInfo::Swap(ReconnectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReconnectInfo::InternalSwap(ReconnectInfo* other) {
  backoff_ms_.InternalSwap(&other->backoff_ms_);
  std::swap(passed_, other->passed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReconnectInfo::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2ftesting_2fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReconnectInfo

// bool passed = 1;
void ReconnectInfo::clear_passed() {
  passed_ = false;
}
bool ReconnectInfo::passed() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ReconnectInfo.passed)
  return passed_;
}
void ReconnectInfo::set_passed(bool value) {
  
  passed_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ReconnectInfo.passed)
}

// repeated int32 backoff_ms = 2;
int ReconnectInfo::backoff_ms_size() const {
  return backoff_ms_.size();
}
void ReconnectInfo::clear_backoff_ms() {
  backoff_ms_.Clear();
}
::google::protobuf::int32 ReconnectInfo::backoff_ms(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ReconnectInfo.backoff_ms)
  return backoff_ms_.Get(index);
}
void ReconnectInfo::set_backoff_ms(int index, ::google::protobuf::int32 value) {
  backoff_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.testing.ReconnectInfo.backoff_ms)
}
void ReconnectInfo::add_backoff_ms(::google::protobuf::int32 value) {
  backoff_ms_.Add(value);
  // @@protoc_insertion_point(field_add:grpc.testing.ReconnectInfo.backoff_ms)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReconnectInfo::backoff_ms() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ReconnectInfo.backoff_ms)
  return backoff_ms_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReconnectInfo::mutable_backoff_ms() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ReconnectInfo.backoff_ms)
  return &backoff_ms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace grpc

// @@protoc_insertion_point(global_scope)
